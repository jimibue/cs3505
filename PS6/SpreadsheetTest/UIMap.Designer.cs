// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// =1+1 added to A1
        /// </summary>
        public void BasicFormulaTest()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.BasicFormulaTestParams.UIYexcelWindowExePath, this.BasicFormulaTestParams.UIYexcelWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(71, 38));

            // Type '=1+1' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.BasicFormulaTestParams.UITextBox_contentEditText;

            // Type '{Enter}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.BasicFormulaTestParams.UITextBox_contentEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uITextBox_cellNameEdit = this.UIYexcelWindow.UIA1Window.UITextBox_cellNameEdit;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinEdit uITextBox_valueEdit = this.UIYexcelWindow.UITextBox_valueWindow.UITextBox_valueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_cellName' text box equals 'A1'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UITextBox_cellNameEditText, uITextBox_cellNameEdit.Text);

            // Verify that the 'Text' property of 'textBox_content' text box equals '=1+1'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text);

            // Verify that the 'Text' property of 'textBox_value' text box equals '2'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UITextBox_valueEditText, uITextBox_valueEdit.Text);
        }
        
        /// <summary>
        /// BasicFormulaErrorTest - Use 'BasicFormulaErrorTestParams' to pass parameters into this method.
        /// </summary>
        public void BasicFormulaErrorTest()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.BasicFormulaErrorTestParams.UIYexcelWindowExePath, this.BasicFormulaErrorTestParams.UIYexcelWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(75, 38));

            // Type '=A2' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.BasicFormulaErrorTestParams.UITextBox_contentEditText;

            // Type '{Enter}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.BasicFormulaErrorTestParams.UITextBox_contentEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// BasicFormulaErrorTestAssert - Use 'BasicFormulaErrorTestAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void BasicFormulaErrorTestAssert()
        {
            #region Variable Declarations
            WinEdit uITextBox_valueEdit = this.UIYexcelWindow.UITextBox_valueWindow.UITextBox_valueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_value' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.BasicFormulaErrorTestAssertExpectedValues.UITextBox_valueEditText, uITextBox_valueEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinTitleBar uIYexcelTitleBar = this.UIYexcelWindow.UIYexcelTitleBar;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'Yexcel' title bar
            Mouse.Click(uIYexcelTitleBar, new Point(622, 10));

            // Type '' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.RecordedMethod1Params.UITextBox_contentEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(89, 59));

            // Type '{Right}{Left}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod1Params.UITextBox_contentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(44, 57));

            // Type '1' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.RecordedMethod1Params.UITextBox_contentEditText1;

            // Type '{LShiftKey}{Enter}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod1Params.UITextBox_contentEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_content' text box equals '1'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text);
        }
        
        /// <summary>
        /// FomulaErrorCorrected
        /// </summary>
        public void FomulaErrorCorrected()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(58, 39));
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uITextBox_valueEdit = this.UIYexcelWindow.UITextBox_valueWindow.UITextBox_valueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_value' text box equals '1'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UITextBox_valueEditText, uITextBox_valueEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinMenuItem uIInfoMenuItem = this.UIYexcelWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIInfoMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.RecordedMethod2Params.UIYexcelWindowExePath, this.RecordedMethod2Params.UIYexcelWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(55, 37));

            // Type '=1-1' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.RecordedMethod2Params.UITextBox_contentEditText;

            // Type '{Enter}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod2Params.UITextBox_contentEditSendKeys, ModifierKeys.None);

            // Click 'Help' -> 'Info' menu item
            Mouse.Click(uIInfoMenuItem, new Point(41, 5));
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Verify that the 'DisplayText' property of 'OK' button equals 'OK'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIOKButtonDisplayText, uIOKButton.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIItemWindow.UIItemWindow1.UIItemTitleBar.UICloseButton;
            WinMenuItem uISaveMenuItem = this.UIYexcelWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinButton uIPreviousLocationsButton = this.UISaveAsWindow.UIItemWindow.UIItemToolBar.UIPreviousLocationsButton;
            WinButton uIAddressButton = this.UISaveAsWindow.UIItemWindow1.UIAddressComboBox.UIAddressButton;
            WinTreeItem uIDesktopTreeItem = this.UISaveAsWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinMenuItem uIOpenMenuItem = this.UIYexcelWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 9));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(41, 9));

            // Click 'Previous Locations' button
            Mouse.Click(uIPreviousLocationsButton, new Point(9, 7));

            // Double-Click 'Address' button
            Mouse.DoubleClick(uIAddressButton, new Point(6, 6));

            // Click 'Address' button
            Mouse.Click(uIAddressButton, new Point(6, 6));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(44, 16));

            // Select 'test1a.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod3Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(22, 17));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(38, 5));
        }
        
        /// <summary>
        /// AssertMethod5 - Use 'AssertMethod5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIClosingWindow.UIYesWindow.UIYesButton;
            #endregion

            // Verify that the 'Name' property of '&Yes' button equals 'Yes'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UIYesButtonName, uIYesButton.Name);
        }
        
        /// <summary>
        /// RecordedMethod4 - Use 'RecordedMethod4Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinButton uINOButton = this.UIClosingWindow.UINOWindow.UINOButton;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow.UIFilenameComboBox;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            #endregion

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(37, 8));

            // Select 'test1a' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod4Params.UIFilenameComboBoxEditableItem;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(11, 15));
        }
        
        /// <summary>
        /// AssertMethod6 - Use 'AssertMethod6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod6()
        {
            #region Variable Declarations
            WinEdit uITextBox_valueEdit = this.UIYexcelWindow.UITextBox_valueWindow.UITextBox_valueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_value' text box equals '0'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UITextBox_valueEditText, uITextBox_valueEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.RecordedMethod5Params.UIYexcelWindowExePath, this.RecordedMethod5Params.UIYexcelWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(52, 37));

            // Type '=1--' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.RecordedMethod5Params.UITextBox_contentEditText;

            // Type '{Enter}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod5Params.UITextBox_contentEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(43, 9));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(80, 40));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(52, 14));

            // Type '' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.RecordedMethod5Params.UITextBox_contentEditText1;
        }
        
        /// <summary>
        /// CircularExpceptionCheckAssertion - Use 'CircularExpceptionCheckAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CircularExpceptionCheckAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox_valueEdit = this.UIYexcelWindow.UITextBox_valueWindow.UITextBox_valueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_value' text box equals ''
            Assert.AreEqual(this.CircularExpceptionCheckAssertionExpectedValues.UITextBox_valueEditText, uITextBox_valueEdit.Text);
        }
        
        /// <summary>
        /// InvalidFormulaCheck - Use 'InvalidFormulaCheckParams' to pass parameters into this method.
        /// </summary>
        public void InvalidFormulaCheck()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(44, 43));

            // Type '=1--' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.InvalidFormulaCheckParams.UITextBox_contentEditText;

            // Type '{Enter}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.InvalidFormulaCheckParams.UITextBox_contentEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(58, 16));

            // Type '' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.InvalidFormulaCheckParams.UITextBox_contentEditText1;

            // Type '{Down}{Up}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.InvalidFormulaCheckParams.UITextBox_contentEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// FormulaErrorCheckAssertion - Use 'FormulaErrorCheckAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void FormulaErrorCheckAssertion()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_content' text box equals ''
            Assert.AreEqual(this.FormulaErrorCheckAssertionExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod6 - Use 'RecordedMethod6Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Type '{Left}{Up}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod6Params.UITextBox_contentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(83, 340));

            // Type '{Left}{Down}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod6Params.UITextBox_contentEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(1037, 338));

            // Type '{Down}{Right}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod6Params.UITextBox_contentEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(1031, 38));

            // Type '{Up}{Right}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod6Params.UITextBox_contentEditSendKeys3, ModifierKeys.None);
        }
        
        /// <summary>
        /// CornerCaseCheck - Use 'CornerCaseCheckExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CornerCaseCheck()
        {
            #region Variable Declarations
            WinEdit uITextBox_cellNameEdit = this.UIYexcelWindow.UIA1Window.UITextBox_cellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_cellName' text box equals 'Z1'
            Assert.AreEqual(this.CornerCaseCheckExpectedValues.UITextBox_cellNameEditText, uITextBox_cellNameEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod7 - Use 'RecordedMethod7Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.RecordedMethod7Params.UIYexcelWindowExePath, this.RecordedMethod7Params.UIYexcelWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(79, 37));

            // Type '{Left}{Up}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod7Params.UITextBox_contentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(92, 331));

            // Type '{Left}{Down}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod7Params.UITextBox_contentEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(1030, 339));

            // Type '{Down}{Right}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod7Params.UITextBox_contentEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(1176, 309));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(1040, 40));

            // Type '{Up}{Right}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod7Params.UITextBox_contentEditSendKeys3, ModifierKeys.None);
        }
        
        /// <summary>
        /// RecordedMethod8 - Use 'RecordedMethod8Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod8()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.RecordedMethod8Params.UIYexcelWindowExePath, this.RecordedMethod8Params.UIYexcelWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(81, 37));

            // Type '=A1' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.RecordedMethod8Params.UITextBox_contentEditText;

            // Type '{Enter}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod8Params.UITextBox_contentEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.RecordedMethod8Params.UIOKButtonSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(74, 54));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(59, 12));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(80, 35));
        }
        
        /// <summary>
        /// CircularExpceptionCheck - Use 'CircularExpceptionCheckExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CircularExpceptionCheck()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_content' text box equals ''
            Assert.AreEqual(this.CircularExpceptionCheckExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod9
        /// </summary>
        public void RecordedMethod9()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIYexcelWindow.UIYexcelTitleBar.UICloseButton;
            WinButton uINOButton = this.UIClosingWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(47, 15));
        }
        
        /// <summary>
        /// BasicTest2 - Use 'BasicTest2Params' to pass parameters into this method.
        /// </summary>
        public void BasicTest2()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UIYexcelWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton = this.UIYexcelWindow1.UIYexcelTitleBar.UICloseButton;
            WinMenuItem uISaveMenuItem = this.UIYexcelWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinButton uICloseButton1 = this.UISaveAsWindow.UISaveAsTitleBar.UICloseButton;
            WinMenuItem uIOpenMenuItem = this.UIYexcelWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uINOButton = this.UIClosingWindow.UINOWindow.UINOButton;
            WinTitleBar uIOpenTitleBar = this.UIOpenWindow.UIOpenTitleBar;
            WinButton uICloseButton2 = this.UIOpenWindow.UIOpenTitleBar.UICloseButton;
            WinMenuItem uIInfoMenuItem = this.UIYexcelWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIInfoMenuItem;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.BasicTest2Params.UIYexcelWindowExePath, this.BasicTest2Params.UIYexcelWindowAlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(27, 6));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 7));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(35, 5));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(30, 8));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(53, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(965, 296));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(42, 13));

            // Click 'Open' title bar
            Mouse.Click(uIOpenTitleBar, new Point(788, 18));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(19, 10));

            // Click 'Help' -> 'Info' menu item
            Mouse.Click(uIInfoMenuItem, new Point(25, 9));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(60, 9));
        }
        
        /// <summary>
        /// AssertMethod7 - Use 'AssertMethod7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod7()
        {
            #region Variable Declarations
            WinEdit uITextBox_cellNameEdit = this.UIYexcelWindow.UIA1Window.UITextBox_cellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_cellName' text box equals 'A1'
            Assert.AreEqual(this.AssertMethod7ExpectedValues.UITextBox_cellNameEditText, uITextBox_cellNameEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod10 - Use 'RecordedMethod10Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod10()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinMenuItem uISaveMenuItem = this.UIYexcelWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.RecordedMethod10Params.UIYexcelWindowExePath, this.RecordedMethod10Params.UIYexcelWindowAlternateExePath);

            // Type '' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.RecordedMethod10Params.UITextBox_contentEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(74, 41));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(40, 6));

            // Select 'testdelete' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod10Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(34, 15));
        }
        
        /// <summary>
        /// AssertMethod8 - Use 'AssertMethod8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod8()
        {
            #region Variable Declarations
            WinEdit uITextBox_cellNameEdit = this.UIYexcelWindow.UIA1Window.UITextBox_cellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_cellName' text box equals 'A1'
            Assert.AreEqual(this.AssertMethod8ExpectedValues.UITextBox_cellNameEditText, uITextBox_cellNameEdit.Text);
        }
        
        /// <summary>
        /// InvaliForm - Use 'InvaliFormParams' to pass parameters into this method.
        /// </summary>
        public void InvaliForm()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.InvaliFormParams.UIYexcelWindowExePath, this.InvaliFormParams.UIYexcelWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(53, 37));

            // Type '=1--' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.InvaliFormParams.UITextBox_contentEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(61, 58));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(71, 8));

            // Type '' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.InvaliFormParams.UITextBox_contentEditText1;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(75, 59));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(81, 40));
        }
        
        /// <summary>
        /// AssertMethod9 - Use 'AssertMethod9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod9()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_content' text box equals ''
            Assert.AreEqual(this.AssertMethod9ExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod11 - Use 'RecordedMethod11Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod11()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.RecordedMethod11Params.UIYexcelWindowExePath, this.RecordedMethod11Params.UIYexcelWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(57, 39));

            // Type '=A1' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.RecordedMethod11Params.UITextBox_contentEditText;

            // Type '{Up}{Left}{Down}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.RecordedMethod11Params.UITextBox_contentEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.RecordedMethod11Params.UIOKButtonSendKeys, ModifierKeys.None);

            // Type '' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.RecordedMethod11Params.UITextBox_contentEditText1;
        }
        
        /// <summary>
        /// YO YO YO
        /// </summary>
        public void YO()
        {

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.YOParams.ExePath, this.YOParams.AlternateExePath);
        }
        
        /// <summary>
        /// YOAsertion - Use 'YOAsertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void YOAsertion()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Verify that the 'ControlType' property of 'textBox_content' text box equals 'Edit'
            Assert.AreEqual(this.YOAsertionExpectedValues.UITextBox_contentEditControlType, uITextBox_contentEdit.ControlType.ToString(), "ass fail");
        }
        
        /// <summary>
        /// RecordedMethod12 - Use 'RecordedMethod12Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod12()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.RecordedMethod12Params.UIYexcelWindowExePath, this.RecordedMethod12Params.UIYexcelWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(93, 39));

            // Type '1' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.RecordedMethod12Params.UITextBox_contentEditText;
        }
        
        #region Properties
        public virtual BasicFormulaTestParams BasicFormulaTestParams
        {
            get
            {
                if ((this.mBasicFormulaTestParams == null))
                {
                    this.mBasicFormulaTestParams = new BasicFormulaTestParams();
                }
                return this.mBasicFormulaTestParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual BasicFormulaErrorTestParams BasicFormulaErrorTestParams
        {
            get
            {
                if ((this.mBasicFormulaErrorTestParams == null))
                {
                    this.mBasicFormulaErrorTestParams = new BasicFormulaErrorTestParams();
                }
                return this.mBasicFormulaErrorTestParams;
            }
        }
        
        public virtual BasicFormulaErrorTestAssertExpectedValues BasicFormulaErrorTestAssertExpectedValues
        {
            get
            {
                if ((this.mBasicFormulaErrorTestAssertExpectedValues == null))
                {
                    this.mBasicFormulaErrorTestAssertExpectedValues = new BasicFormulaErrorTestAssertExpectedValues();
                }
                return this.mBasicFormulaErrorTestAssertExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public virtual AssertMethod6ExpectedValues AssertMethod6ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod6ExpectedValues == null))
                {
                    this.mAssertMethod6ExpectedValues = new AssertMethod6ExpectedValues();
                }
                return this.mAssertMethod6ExpectedValues;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual CircularExpceptionCheckAssertionExpectedValues CircularExpceptionCheckAssertionExpectedValues
        {
            get
            {
                if ((this.mCircularExpceptionCheckAssertionExpectedValues == null))
                {
                    this.mCircularExpceptionCheckAssertionExpectedValues = new CircularExpceptionCheckAssertionExpectedValues();
                }
                return this.mCircularExpceptionCheckAssertionExpectedValues;
            }
        }
        
        public virtual InvalidFormulaCheckParams InvalidFormulaCheckParams
        {
            get
            {
                if ((this.mInvalidFormulaCheckParams == null))
                {
                    this.mInvalidFormulaCheckParams = new InvalidFormulaCheckParams();
                }
                return this.mInvalidFormulaCheckParams;
            }
        }
        
        public virtual FormulaErrorCheckAssertionExpectedValues FormulaErrorCheckAssertionExpectedValues
        {
            get
            {
                if ((this.mFormulaErrorCheckAssertionExpectedValues == null))
                {
                    this.mFormulaErrorCheckAssertionExpectedValues = new FormulaErrorCheckAssertionExpectedValues();
                }
                return this.mFormulaErrorCheckAssertionExpectedValues;
            }
        }
        
        public virtual RecordedMethod6Params RecordedMethod6Params
        {
            get
            {
                if ((this.mRecordedMethod6Params == null))
                {
                    this.mRecordedMethod6Params = new RecordedMethod6Params();
                }
                return this.mRecordedMethod6Params;
            }
        }
        
        public virtual CornerCaseCheckExpectedValues CornerCaseCheckExpectedValues
        {
            get
            {
                if ((this.mCornerCaseCheckExpectedValues == null))
                {
                    this.mCornerCaseCheckExpectedValues = new CornerCaseCheckExpectedValues();
                }
                return this.mCornerCaseCheckExpectedValues;
            }
        }
        
        public virtual RecordedMethod7Params RecordedMethod7Params
        {
            get
            {
                if ((this.mRecordedMethod7Params == null))
                {
                    this.mRecordedMethod7Params = new RecordedMethod7Params();
                }
                return this.mRecordedMethod7Params;
            }
        }
        
        public virtual RecordedMethod8Params RecordedMethod8Params
        {
            get
            {
                if ((this.mRecordedMethod8Params == null))
                {
                    this.mRecordedMethod8Params = new RecordedMethod8Params();
                }
                return this.mRecordedMethod8Params;
            }
        }
        
        public virtual CircularExpceptionCheckExpectedValues CircularExpceptionCheckExpectedValues
        {
            get
            {
                if ((this.mCircularExpceptionCheckExpectedValues == null))
                {
                    this.mCircularExpceptionCheckExpectedValues = new CircularExpceptionCheckExpectedValues();
                }
                return this.mCircularExpceptionCheckExpectedValues;
            }
        }
        
        public virtual BasicTest2Params BasicTest2Params
        {
            get
            {
                if ((this.mBasicTest2Params == null))
                {
                    this.mBasicTest2Params = new BasicTest2Params();
                }
                return this.mBasicTest2Params;
            }
        }
        
        public virtual AssertMethod7ExpectedValues AssertMethod7ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod7ExpectedValues == null))
                {
                    this.mAssertMethod7ExpectedValues = new AssertMethod7ExpectedValues();
                }
                return this.mAssertMethod7ExpectedValues;
            }
        }
        
        public virtual RecordedMethod10Params RecordedMethod10Params
        {
            get
            {
                if ((this.mRecordedMethod10Params == null))
                {
                    this.mRecordedMethod10Params = new RecordedMethod10Params();
                }
                return this.mRecordedMethod10Params;
            }
        }
        
        public virtual AssertMethod8ExpectedValues AssertMethod8ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod8ExpectedValues == null))
                {
                    this.mAssertMethod8ExpectedValues = new AssertMethod8ExpectedValues();
                }
                return this.mAssertMethod8ExpectedValues;
            }
        }
        
        public virtual InvaliFormParams InvaliFormParams
        {
            get
            {
                if ((this.mInvaliFormParams == null))
                {
                    this.mInvaliFormParams = new InvaliFormParams();
                }
                return this.mInvaliFormParams;
            }
        }
        
        public virtual AssertMethod9ExpectedValues AssertMethod9ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod9ExpectedValues == null))
                {
                    this.mAssertMethod9ExpectedValues = new AssertMethod9ExpectedValues();
                }
                return this.mAssertMethod9ExpectedValues;
            }
        }
        
        public virtual RecordedMethod11Params RecordedMethod11Params
        {
            get
            {
                if ((this.mRecordedMethod11Params == null))
                {
                    this.mRecordedMethod11Params = new RecordedMethod11Params();
                }
                return this.mRecordedMethod11Params;
            }
        }
        
        public virtual YOParams YOParams
        {
            get
            {
                if ((this.mYOParams == null))
                {
                    this.mYOParams = new YOParams();
                }
                return this.mYOParams;
            }
        }
        
        public virtual YOAsertionExpectedValues YOAsertionExpectedValues
        {
            get
            {
                if ((this.mYOAsertionExpectedValues == null))
                {
                    this.mYOAsertionExpectedValues = new YOAsertionExpectedValues();
                }
                return this.mYOAsertionExpectedValues;
            }
        }
        
        public virtual RecordedMethod12Params RecordedMethod12Params
        {
            get
            {
                if ((this.mRecordedMethod12Params == null))
                {
                    this.mRecordedMethod12Params = new RecordedMethod12Params();
                }
                return this.mRecordedMethod12Params;
            }
        }
        
        public UIYexcelWindow UIYexcelWindow
        {
            get
            {
                if ((this.mUIYexcelWindow == null))
                {
                    this.mUIYexcelWindow = new UIYexcelWindow();
                }
                return this.mUIYexcelWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIClosingWindow UIClosingWindow
        {
            get
            {
                if ((this.mUIClosingWindow == null))
                {
                    this.mUIClosingWindow = new UIClosingWindow();
                }
                return this.mUIClosingWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIYexcelWindow1 UIYexcelWindow1
        {
            get
            {
                if ((this.mUIYexcelWindow1 == null))
                {
                    this.mUIYexcelWindow1 = new UIYexcelWindow1();
                }
                return this.mUIYexcelWindow1;
            }
        }
        #endregion
        
        #region Fields
        private BasicFormulaTestParams mBasicFormulaTestParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private BasicFormulaErrorTestParams mBasicFormulaErrorTestParams;
        
        private BasicFormulaErrorTestAssertExpectedValues mBasicFormulaErrorTestAssertExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private AssertMethod6ExpectedValues mAssertMethod6ExpectedValues;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private CircularExpceptionCheckAssertionExpectedValues mCircularExpceptionCheckAssertionExpectedValues;
        
        private InvalidFormulaCheckParams mInvalidFormulaCheckParams;
        
        private FormulaErrorCheckAssertionExpectedValues mFormulaErrorCheckAssertionExpectedValues;
        
        private RecordedMethod6Params mRecordedMethod6Params;
        
        private CornerCaseCheckExpectedValues mCornerCaseCheckExpectedValues;
        
        private RecordedMethod7Params mRecordedMethod7Params;
        
        private RecordedMethod8Params mRecordedMethod8Params;
        
        private CircularExpceptionCheckExpectedValues mCircularExpceptionCheckExpectedValues;
        
        private BasicTest2Params mBasicTest2Params;
        
        private AssertMethod7ExpectedValues mAssertMethod7ExpectedValues;
        
        private RecordedMethod10Params mRecordedMethod10Params;
        
        private AssertMethod8ExpectedValues mAssertMethod8ExpectedValues;
        
        private InvaliFormParams mInvaliFormParams;
        
        private AssertMethod9ExpectedValues mAssertMethod9ExpectedValues;
        
        private RecordedMethod11Params mRecordedMethod11Params;
        
        private YOParams mYOParams;
        
        private YOAsertionExpectedValues mYOAsertionExpectedValues;
        
        private RecordedMethod12Params mRecordedMethod12Params;
        
        private UIYexcelWindow mUIYexcelWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIClosingWindow mUIClosingWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIYexcelWindow1 mUIYexcelWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicFormulaTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class BasicFormulaTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '=1+1' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "=1+1";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_cellName' text box equals 'A1'
        /// </summary>
        public string UITextBox_cellNameEditText = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals '=1+1'
        /// </summary>
        public string UITextBox_contentEditText = "=1+1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_value' text box equals '2'
        /// </summary>
        public string UITextBox_valueEditText = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicFormulaErrorTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class BasicFormulaErrorTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "..\\..\\..\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "..\\..\\..\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '=A2' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "=A2";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicFormulaErrorTestAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class BasicFormulaErrorTestAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_value' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UITextBox_valueEditText = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "";
        
        /// <summary>
        /// Type '{Right}{Left}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Right}{Left}";
        
        /// <summary>
        /// Type '1' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText1 = "1";
        
        /// <summary>
        /// Type '{LShiftKey}{Enter}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys1 = "{LShiftKey}{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals '1'
        /// </summary>
        public string UITextBox_contentEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_value' text box equals '1'
        /// </summary>
        public string UITextBox_valueEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '=1-1' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "=1-1";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'OK' button equals 'OK'
        /// </summary>
        public string UIOKButtonDisplayText = "OK";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'test1a.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test1a.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '&Yes' button equals 'Yes'
        /// </summary>
        public string UIYesButtonName = "Yes";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'test1a' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test1a";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_value' text box equals '0'
        /// </summary>
        public string UITextBox_valueEditText = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '=1--' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "=1--";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText1 = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularExpceptionCheckAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class CircularExpceptionCheckAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_value' text box equals ''
        /// </summary>
        public string UITextBox_valueEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InvalidFormulaCheck'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class InvalidFormulaCheckParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=1--' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "=1--";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText1 = "";
        
        /// <summary>
        /// Type '{Down}{Up}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys1 = "{Down}{Up}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaErrorCheckAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class FormulaErrorCheckAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals ''
        /// </summary>
        public string UITextBox_contentEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod6Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{Left}{Up}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Left}{Up}";
        
        /// <summary>
        /// Type '{Left}{Down}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys1 = "{Left}{Down}";
        
        /// <summary>
        /// Type '{Down}{Right}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys2 = "{Down}{Right}";
        
        /// <summary>
        /// Type '{Up}{Right}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys3 = "{Up}{Right}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CornerCaseCheck'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class CornerCaseCheckExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_cellName' text box equals 'Z1'
        /// </summary>
        public string UITextBox_cellNameEditText = "Z1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod7Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '{Left}{Up}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Left}{Up}";
        
        /// <summary>
        /// Type '{Left}{Down}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys1 = "{Left}{Down}";
        
        /// <summary>
        /// Type '{Down}{Right}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys2 = "{Down}{Right}";
        
        /// <summary>
        /// Type '{Up}{Right}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys3 = "{Up}{Right}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod8Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '=A1' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularExpceptionCheck'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class CircularExpceptionCheckExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals ''
        /// </summary>
        public string UITextBox_contentEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class BasicTest2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_cellName' text box equals 'A1'
        /// </summary>
        public string UITextBox_cellNameEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod10Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "";
        
        /// <summary>
        /// Select 'testdelete' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testdelete";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_cellName' text box equals 'A1'
        /// </summary>
        public string UITextBox_cellNameEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InvaliForm'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class InvaliFormParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '=1--' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "=1--";
        
        /// <summary>
        /// Type '' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText1 = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals ''
        /// </summary>
        public string UITextBox_contentEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod11Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '=A1' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "=A1";
        
        /// <summary>
        /// Type '{Up}{Left}{Down}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Up}{Left}{Down}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText1 = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'YO'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class YOParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'YOAsertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class YOAsertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'textBox_content' text box equals 'Edit'
        /// </summary>
        public string UITextBox_contentEditControlType = "Edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod12Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '1' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "1";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYexcelWindow : WinWindow
    {
        
        public UIYexcelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Yexcel";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UITextBox_contentWindow UITextBox_contentWindow
        {
            get
            {
                if ((this.mUITextBox_contentWindow == null))
                {
                    this.mUITextBox_contentWindow = new UITextBox_contentWindow(this);
                }
                return this.mUITextBox_contentWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UITextBox_valueWindow UITextBox_valueWindow
        {
            get
            {
                if ((this.mUITextBox_valueWindow == null))
                {
                    this.mUITextBox_valueWindow = new UITextBox_valueWindow(this);
                }
                return this.mUITextBox_valueWindow;
            }
        }
        
        public UIYexcelTitleBar UIYexcelTitleBar
        {
            get
            {
                if ((this.mUIYexcelTitleBar == null))
                {
                    this.mUIYexcelTitleBar = new UIYexcelTitleBar(this);
                }
                return this.mUIYexcelTitleBar;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UITextBox_contentWindow mUITextBox_contentWindow;
        
        private UIA1Window mUIA1Window;
        
        private UITextBox_valueWindow mUITextBox_valueWindow;
        
        private UIYexcelTitleBar mUIYexcelTitleBar;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITextBox_contentWindow : WinWindow
    {
        
        public UITextBox_contentWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox_content";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox_contentEdit
        {
            get
            {
                if ((this.mUITextBox_contentEdit == null))
                {
                    this.mUITextBox_contentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox_contentEdit.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUITextBox_contentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox_contentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox_cellName";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox_cellNameEdit
        {
            get
            {
                if ((this.mUITextBox_cellNameEdit == null))
                {
                    this.mUITextBox_cellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox_cellNameEdit.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUITextBox_cellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox_cellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITextBox_valueWindow : WinWindow
    {
        
        public UITextBox_valueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox_value";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox_valueEdit
        {
            get
            {
                if ((this.mUITextBox_valueEdit == null))
                {
                    this.mUITextBox_valueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox_valueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Content";
                    this.mUITextBox_valueEdit.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUITextBox_valueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox_valueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYexcelTitleBar : WinTitleBar
    {
        
        public UIYexcelTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHelpMenuItem mUIHelpMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIInfoMenuItem
        {
            get
            {
                if ((this.mUIInfoMenuItem == null))
                {
                    this.mUIInfoMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIInfoMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Info";
                    this.mUIInfoMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIInfoMenuItem.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUIInfoMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIInfoMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            #endregion
        }
        
        #region Properties
        public UIItemTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new UIItemTitleBar(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTitleBar mUIItemTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemTitleBar : WinTitleBar
    {
        
        public UIItemTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UISaveAsTitleBar UISaveAsTitleBar
        {
            get
            {
                if ((this.mUISaveAsTitleBar == null))
                {
                    this.mUISaveAsTitleBar = new UISaveAsTitleBar(this);
                }
                return this.mUISaveAsTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        
        private UISaveAsTitleBar mUISaveAsTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ToolbarWindow32";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIItemToolBar UIItemToolBar
        {
            get
            {
                if ((this.mUIItemToolBar == null))
                {
                    this.mUIItemToolBar = new UIItemToolBar(this);
                }
                return this.mUIItemToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemToolBar mUIItemToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemToolBar : WinToolBar
    {
        
        public UIItemToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIPreviousLocationsButton
        {
            get
            {
                if ((this.mUIPreviousLocationsButton == null))
                {
                    this.mUIPreviousLocationsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPreviousLocationsButton.SearchProperties[WinButton.PropertyNames.Name] = "Previous Locations";
                    this.mUIPreviousLocationsButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIPreviousLocationsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPreviousLocationsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "41477";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIAddressComboBox UIAddressComboBox
        {
            get
            {
                if ((this.mUIAddressComboBox == null))
                {
                    this.mUIAddressComboBox = new UIAddressComboBox(this);
                }
                return this.mUIAddressComboBox;
            }
        }
        #endregion
        
        #region Fields
        private UIAddressComboBox mUIAddressComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAddressComboBox : WinComboBox
    {
        
        public UIAddressComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinComboBox.PropertyNames.Name] = "Address";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddressButton
        {
            get
            {
                if ((this.mUIAddressButton == null))
                {
                    this.mUIAddressButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddressButton.SearchProperties[WinButton.PropertyNames.Name] = "Address";
                    this.mUIAddressButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIAddressButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddressButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveAsTitleBar : WinTitleBar
    {
        
        public UISaveAsTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIClosingWindow : WinWindow
    {
        
        public UIClosingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Closing";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Closing");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Closing");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Closing");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Closing");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Closing");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIOpenTitleBar UIOpenTitleBar
        {
            get
            {
                if ((this.mUIOpenTitleBar == null))
                {
                    this.mUIOpenTitleBar = new UIOpenTitleBar(this);
                }
                return this.mUIOpenTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIOpenTitleBar mUIOpenTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenTitleBar : WinTitleBar
    {
        
        public UIOpenTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYexcelWindow1 : WinWindow
    {
        
        public UIYexcelWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Yexcel";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public UIYexcelTitleBar1 UIYexcelTitleBar
        {
            get
            {
                if ((this.mUIYexcelTitleBar == null))
                {
                    this.mUIYexcelTitleBar = new UIYexcelTitleBar1(this);
                }
                return this.mUIYexcelTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIYexcelTitleBar1 mUIYexcelTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYexcelTitleBar1 : WinTitleBar
    {
        
        public UIYexcelTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
