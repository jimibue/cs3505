///CS3500 PS6 Author James Yeates
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using SS;
using SpreadsheetUtilities;
using System.Text.RegularExpressions;

//Version 1.0  10/31/2014 - The GUI is set up and working with basic functions.  Design is good.  Things that need to be worked On
//-cleaning code, more helper methods.
//-a way to clear a cell (cntrl-x)
//backspace is not working esspically in the case when I erase all of the contents. cell won't clear
//error handling and making it look good.
//still have a bug in ps5 not handling circular exceptions well
//key preveiw property

//Version 1.1 11/1/14
//-cleaned code with help private method updateModel and setRowAndCol and cleaned up arrowkey processing
//-added feature to not allow a user to enter a invalid formula or cause a circular dependency.  User must
//resolve this problem before any thing can proceed, probably should not allow a user to save if there is 
// this problem?
// -added basic open functionality opened a process the basic xml file correctly. Except the way my class is it won't
//  allowed a bad file to be uploaded, but this is probably desirable 
// -found a wierd bug that I can't duplicate at the start don't know what I did.
//- over all looking good need to start debugging and do more formal testing.

namespace SpreadsheetGUI
{
    public partial class SpreadsheetGUI : Form
    {
       
        /// <summary>
        /// 
        /// </summary>
        private int row;
        /// <summary>
        /// 
        /// </summary>
        private int col;
        /// <summary>
        /// Model view of the spreadsheet
        /// </summary>
        AbstractSpreadsheet SSModel;
      
        private bool cellChanged;

        public SpreadsheetGUI()
        {
            

            SSModel = new Spreadsheet(s => Regex.IsMatch(s, @"^[a-zA-Z][1-9][0-9]?$"), s => s.ToUpper(), "ps6");
            cellChanged = false;
            InitializeComponent();

            // This an example of registering a method so that it is notified when
            // an event happens.  The SelectionChanged event is declared with a
            // delegate that specifies that all methods that register with it must
            // take a SpreadsheetPanel as its parameter and return nothing.  So we
            // register the displaySelection method below.

            // This could also be done graphically in the designer, as has been
            // demonstrated in class.
            spreadsheetPanel1.SelectionChanged += displaySelection;
            spreadsheetPanel1.SetSelection(0, 0);
            textBox_cellName.Text = "A1";
        }

        // Every time the selection changes, this method is called with the
        // Spreadsheet as its parameter.  We display the current time in the cell.

        private void displaySelection(SpreadsheetPanel ss)
        {
            bool succesfull = true;
            int newRow, newCol;
            //String value;
            // if a cell has been updated then add it to the model and
            //update the gui
            if(cellChanged)
            {
                succesfull = updateModel(row, col);
            }
            if (succesfull)
            {
                //get the newly selected cell
                ss.GetSelection(out newCol, out newRow);
                displayCurrentCell(newCol, newRow);

                //save cells' postion
                row = newRow;
                col = newCol;
            }
            else
            {
                spreadsheetPanel1.SetSelection(col, row);
            }
        }

        private string getContentsAsString(object p)
        {
            throw new NotImplementedException();
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            bool succesfull = true;
            //see if a arrow was pressed and if bounds are ok
            if (keyData == Keys.Up && row > 0 || keyData == Keys.Down && row < 99 ||
                keyData == Keys.Right && col < 26 || keyData == Keys.Left && col > 0)
            {
                //
                if (cellChanged) { 
                    //will be set to false if something goes wrong
                    succesfull = updateModel(row, col);
                }
                if (succesfull)
                {
                    if (keyData == Keys.Up) { row -= 1; }
                    else if (keyData == Keys.Down) { row += 1; }
                    else if (keyData == Keys.Right) { col += 1; }
                    else if (keyData == Keys.Left) { col -= 1; }

                    displayCurrentCell(col,row);
                   
                }
            }
            return false;
        }

        private void displayCurrentCell(int col, int row)
        {
            //textBox_content.Focus();//brings cursor to text box already there?
            //textBox_content.SelectionStart = 3;//sets cursor at the end of the word
            string value = "";
            cellChanged = false;
            
            //get the newly selected cell
            spreadsheetPanel1.SetSelection(col, row);
            spreadsheetPanel1.GetValue(col, row, out value);
            textBox_value.Text = value;

            //get newName
            string name = getCellName(row, col);
            textBox_cellName.Text = name;

            //SSModel.SetContentsOfCell(name, textBox_value.Text);
            textBox_content.Text = SSModel.GetCellContents(name).ToString();
        }


 

        // Deals with the New menu
        private void newToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Tell the application context to run the form on the same
            // thread as the other forms.
            DemoApplicationContext.getAppContext().RunForm(new SpreadsheetGUI());
        }

        // Deals with the Close menu
        private void closeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }
        // Deals with the save menu
        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        // Deals with the open menu
        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {

            //check if orignal file has been changed if so ask if they want to save.
            
            
            //With help from www.dotnetperls.com
            //show dialog
            DialogResult result = openFileDialog1.ShowDialog();
            //check result
            if (result == DialogResult.OK)
            {
                string fileName = openFileDialog1.FileName;
                try
                {
                    //make new spreadsheet
                    SSModel = new Spreadsheet(fileName, s => Regex.IsMatch(s, @"^[a-zA-Z][1-9][0-9]?$"), s => s.ToUpper(), "ps6");
                    //fill in the cells in the GUI
                    foreach (String cellName in SSModel.GetNamesOfAllNonemptyCells())
                    {
                        setRowAndCol(cellName);
                        spreadsheetPanel1.SetValue(col, row, SSModel.GetCellValue(cellName).ToString());
                    }

                }catch(Exception )
                {
                    MessageBox.Show("an error occured");
                }
            }
        }

        private void valueTextBox_KeyPressed(object sender, KeyPressEventArgs e)
        {
            bool succesfull = true;
            if (e.KeyChar == (char)(Keys.Enter))
            {
                if (cellChanged)
                {
                    //will be set to false if something goes wrong
                    succesfull = updateModel(row, col);
                }
            }
            else
            {
                if (e.KeyChar == (char)Keys.Back) 
                {
                    spreadsheetPanel1.SetValue(col, row, textBox_content.Text.Substring(0,textBox_content.Text.Length-1));
                }
                else {
                    spreadsheetPanel1.SetValue(col, row, textBox_content.Text + e.KeyChar);
                }
                cellChanged = true;
              
            }
            //spreadsheetPanel1.GetValue(col, row, out cellString);

        }

        /// <summary>
        /// return the name of the cell. ie A1
        /// </summary>
        /// <returns>string-name of the cell</returns>
        private string getCellName(int row, int col)
        {
            return "" + (char)(col + 65) + (row + 1);
        }
        /// <summary>
        /// given a cell name set the row and col. IE given A1 
        /// row will be set to 0 and col will be set to 0
        /// </summary>
        
        private void setRowAndCol(String cellName)
        {
            col = (int)cellName[0] - 65;
            //get the number
            string rowString = cellName.Substring(1,cellName.Length-1);
            row = Int16.Parse(rowString) - 1;
        }
        /// <summary>
        /// gets the contents of the cell
        /// </summary>
        /// <param name="row"></param>
        /// <param name="col"></param>
        /// <returns></returns>
        private string getCellContents(int row, int col)
        {
            string cell = getCellName(row, col);
            return SSModel.GetCellContents(cell).ToString();
        }
        private void spreadsheetPanel1_KeyPress(object sender, KeyPressEventArgs e)
        {
            //string cellString = "";
            //if (e.KeyChar == (char)Keys.Back)
            //{
            //    if (cellString.Length > 0)
            //        cellString = cellString.Substring(0, cellString.Length - 1);
            //}
            //else
            //    cellString += e.KeyChar;
            //spreadsheetPanel1.SetValue(col, row, cellString);
            //spreadsheetPanel1.GetValue(col, row, out cellString);
            ////Content_TextBox1.Text = cellString;

        }


        private bool updateModel(int row, int col)
        {
            try
            {
                SSModel.SetContentsOfCell(getCellName(row, col), textBox_content.Text);
                textBox_content.Text = getCellContents(row, col);
                textBox_value.Text = SSModel.GetCellValue(getCellName(row, col)).ToString();
                spreadsheetPanel1.SetValue(col, row, textBox_value.Text);
                cellChanged = false;
                return true;
            }
            catch (FormulaFormatException e)
            {
                // SSModel.SetContentsOfCell(getCellName(row, col), "");
                // textBox_content.Text = "";
                MessageBox.Show(textBox_content.Text.Substring(1) + " is an invalid formula please change it");
                return false;
                //cellChanged = false;
            }


            catch (CircularException e)
            {
                MessageBox.Show(textBox_content.Text.Substring(1) + "contains a circular exception please change it");
                return false;
            }
            catch (Exception e)
            {
                MessageBox.Show(textBox_content.Text.Substring(1) + " is an invalid formula please change it");
                return false;
            }
        }

        private void infoMenuStripItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("About my program yo!!");
        }

        private void menuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }



    }
}
