// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SSCodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// =1+1 is entered in cell A1
        /// </summary>
        public void BasicAddTest()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.BasicAddTestParams.UIYexcelWindowExePath, this.BasicAddTestParams.UIYexcelWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(52, 39));

            // Type '1+1' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.BasicAddTestParams.UITextBox_contentEditText;
        }
        
        /// <summary>
        /// asserts contents are 1+1
        /// </summary>
        public void AssertConententsEqual()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_content' text box equals '1+1'
            Assert.AreEqual(this.AssertConententsEqualExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text, "expected 1+1");
        }
        
        /// <summary>
        /// adds =a2 in a1 should be formula error than adds 1 to a2 a1 should hold 1, next adds =a2 to a2 a1 should have 1 as well as a2
        /// </summary>
        public void UIBasicTest1()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.UIBasicTest1Params.UIYexcelWindowExePath, this.UIBasicTest1Params.UIYexcelWindowAlternateExePath);

            // Type '1' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.UIBasicTest1Params.UITextBox_contentEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(90, 56));

            // Type '=a2' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.UIBasicTest1Params.UITextBox_contentEditText1;

            // Type '{Enter}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.UIBasicTest1Params.UITextBox_contentEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(43, 14));
        }
        
        /// <summary>
        /// BasicFormulaErrorTest1 - Use 'BasicFormulaErrorTest1Params' to pass parameters into this method.
        /// </summary>
        public void BasicFormulaErrorTest1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.BasicFormulaErrorTest1Params.UIYexcelWindowExePath, this.BasicFormulaErrorTest1Params.UIYexcelWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(83, 38));

            // Type '' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.BasicFormulaErrorTest1Params.UITextBox_contentEditText;

            // Type '=A2' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.BasicFormulaErrorTest1Params.UITextBox_contentEditText1;
        }
        
        /// <summary>
        /// AreTextBoxesEquall - Use 'AreTextBoxesEquallExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AreTextBoxesEquall()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinEdit uITextBox_valueEdit = this.UIYexcelWindow.UITextBox_valueWindow.UITextBox_valueEdit;
            WinEdit uITextBox_cellNameEdit = this.UIYexcelWindow.UIA1Window.UITextBox_cellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_content' text box equals '=A2'
            Assert.AreEqual(this.AreTextBoxesEquallExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text);

            // Verify that the 'Text' property of 'textBox_value' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.AreTextBoxesEquallExpectedValues.UITextBox_valueEditText, uITextBox_valueEdit.Text);

            // Verify that the 'Text' property of 'textBox_cellName' text box equals 'A1'
            Assert.AreEqual(this.AreTextBoxesEquallExpectedValues.UITextBox_cellNameEditText, uITextBox_cellNameEdit.Text);
        }
        
        /// <summary>
        /// A2 gets 1 so A1 should be updated and contain 1
        /// </summary>
        public void BasicFomulaErrorFixed1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(65, 61));

            // Type '1' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.BasicFomulaErrorFixed1Params.UITextBox_contentEditText;

            // Type 'A2' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.BasicFomulaErrorFixed1Params.UITextBox_contentEditText1;
        }
        
        /// <summary>
        /// A1 cell should be changed from FormulaError to 1
        /// </summary>
        public void AssertA1ValueUpdated1()
        {
            #region Variable Declarations
            WinEdit uITextBox_valueEdit = this.UIYexcelWindow.UITextBox_valueWindow.UITextBox_valueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_value' text box equals '1'
            Assert.AreEqual(this.AssertA1ValueUpdated1ExpectedValues.UITextBox_valueEditText, uITextBox_valueEdit.Text);
        }
        
        /// <summary>
        /// Move arrows in corner to see if they cause a problem. After cntrl-x is used to delete contents of A2
        /// </summary>
        public void ArrowAndDeleteContents1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinClient uIYexcelClient = this.UIYexcelWindow.UIYexcelClient;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(70, 60));

            // Type '' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.ArrowAndDeleteContents1Params.UITextBox_contentEditText;

            // Type '{Up}{Up}{Up}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.ArrowAndDeleteContents1Params.UITextBox_contentEditSendKeys, ModifierKeys.None);

            // Move 'Yexcel' client
            Mouse.StartDragging(uIYexcelClient, new Point(501, 470));
            Mouse.StopDragging(uIYexcelClient, 572, -6);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(967, 45));

            // Type '{Up}{Up}{Down}{Right}{Up}{Up}{Up}{Up}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.ArrowAndDeleteContents1Params.UITextBox_contentEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(1029, 316));

            // Type '{Right}{Down}{Left}{Down}{Down}{Up}{Right}{Right}{Down}{Left}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.ArrowAndDeleteContents1Params.UITextBox_contentEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(78, 333));

            // Type '{Down}{Down}{Right}{Right}{Down}{Down}{Down}{Left}{Left}{Left}{Left}{Up}{Up}{Left}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.ArrowAndDeleteContents1Params.UITextBox_contentEditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(69, 51));

            // Type '' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.ArrowAndDeleteContents1Params.UITextBox_contentEditText1;
        }
        
        /// <summary>
        /// AssertContentBoxCorrect_1 - Use 'AssertContentBoxCorrect_1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertContentBoxCorrect_1()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinEdit uITextBox_valueEdit = this.UIYexcelWindow.UITextBox_valueWindow.UITextBox_valueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_content' text box equals ''
            Assert.AreEqual(this.AssertContentBoxCorrect_1ExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text, "should be empty");

            // Verify that the 'Text' property of 'textBox_value' text box equals ''
            Assert.AreEqual(this.AssertContentBoxCorrect_1ExpectedValues.UITextBox_valueEditText, uITextBox_valueEdit.Text, "should be empty");
        }
        
        /// <summary>
        /// AssertA1ValueUpdated2 - Use 'AssertA1ValueUpdated2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertA1ValueUpdated2()
        {
            #region Variable Declarations
            WinEdit uITextBox_valueEdit = this.UIYexcelWindow.UITextBox_valueWindow.UITextBox_valueEdit;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinEdit uITextBox_cellNameEdit = this.UIYexcelWindow.UIA1Window.UITextBox_cellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_value' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.AssertA1ValueUpdated2ExpectedValues.UITextBox_valueEditText, uITextBox_valueEdit.Text);

            // Verify that the 'Text' property of 'textBox_content' text box equals '=A2'
            Assert.AreEqual(this.AssertA1ValueUpdated2ExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text);

            // Verify that the 'Text' property of 'textBox_cellName' text box equals 'A1'
            Assert.AreEqual(this.AssertA1ValueUpdated2ExpectedValues.UITextBox_cellNameEditText, uITextBox_cellNameEdit.Text);
        }
        
        /// <summary>
        /// UpdatedContent - Use 'UpdatedContentParams' to pass parameters into this method.
        /// </summary>
        public void UpdatedContent()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(83, 64));

            // Type '1' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.UpdatedContentParams.UITextBox_contentEditText;

            // Type '{Enter}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.UpdatedContentParams.UITextBox_contentEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// UpdatedSpreadsheet1 - Use 'UpdatedSpreadsheet1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void UpdatedSpreadsheet1()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinEdit uITextBox_cellNameEdit = this.UIYexcelWindow.UIA1Window.UITextBox_cellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_content' text box equals '1'
            Assert.AreEqual(this.UpdatedSpreadsheet1ExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text);

            // Verify that the 'Text' property of 'textBox_cellName' text box equals 'A2'
            Assert.AreEqual(this.UpdatedSpreadsheet1ExpectedValues.UITextBox_cellNameEditText, uITextBox_cellNameEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIYexcelWindow.UIYexcelTitleBar.UICloseButton;
            WinButton uINOButton = this.UIClosingWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(19, 11));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(46, 7));
        }
        
        #region Properties
        public virtual BasicAddTestParams BasicAddTestParams
        {
            get
            {
                if ((this.mBasicAddTestParams == null))
                {
                    this.mBasicAddTestParams = new BasicAddTestParams();
                }
                return this.mBasicAddTestParams;
            }
        }
        
        public virtual AssertConententsEqualExpectedValues AssertConententsEqualExpectedValues
        {
            get
            {
                if ((this.mAssertConententsEqualExpectedValues == null))
                {
                    this.mAssertConententsEqualExpectedValues = new AssertConententsEqualExpectedValues();
                }
                return this.mAssertConententsEqualExpectedValues;
            }
        }
        
        public virtual UIBasicTest1Params UIBasicTest1Params
        {
            get
            {
                if ((this.mUIBasicTest1Params == null))
                {
                    this.mUIBasicTest1Params = new UIBasicTest1Params();
                }
                return this.mUIBasicTest1Params;
            }
        }
        
        public virtual BasicFormulaErrorTest1Params BasicFormulaErrorTest1Params
        {
            get
            {
                if ((this.mBasicFormulaErrorTest1Params == null))
                {
                    this.mBasicFormulaErrorTest1Params = new BasicFormulaErrorTest1Params();
                }
                return this.mBasicFormulaErrorTest1Params;
            }
        }
        
        public virtual AreTextBoxesEquallExpectedValues AreTextBoxesEquallExpectedValues
        {
            get
            {
                if ((this.mAreTextBoxesEquallExpectedValues == null))
                {
                    this.mAreTextBoxesEquallExpectedValues = new AreTextBoxesEquallExpectedValues();
                }
                return this.mAreTextBoxesEquallExpectedValues;
            }
        }
        
        public virtual BasicFomulaErrorFixed1Params BasicFomulaErrorFixed1Params
        {
            get
            {
                if ((this.mBasicFomulaErrorFixed1Params == null))
                {
                    this.mBasicFomulaErrorFixed1Params = new BasicFomulaErrorFixed1Params();
                }
                return this.mBasicFomulaErrorFixed1Params;
            }
        }
        
        public virtual AssertA1ValueUpdated1ExpectedValues AssertA1ValueUpdated1ExpectedValues
        {
            get
            {
                if ((this.mAssertA1ValueUpdated1ExpectedValues == null))
                {
                    this.mAssertA1ValueUpdated1ExpectedValues = new AssertA1ValueUpdated1ExpectedValues();
                }
                return this.mAssertA1ValueUpdated1ExpectedValues;
            }
        }
        
        public virtual ArrowAndDeleteContents1Params ArrowAndDeleteContents1Params
        {
            get
            {
                if ((this.mArrowAndDeleteContents1Params == null))
                {
                    this.mArrowAndDeleteContents1Params = new ArrowAndDeleteContents1Params();
                }
                return this.mArrowAndDeleteContents1Params;
            }
        }
        
        public virtual AssertContentBoxCorrect_1ExpectedValues AssertContentBoxCorrect_1ExpectedValues
        {
            get
            {
                if ((this.mAssertContentBoxCorrect_1ExpectedValues == null))
                {
                    this.mAssertContentBoxCorrect_1ExpectedValues = new AssertContentBoxCorrect_1ExpectedValues();
                }
                return this.mAssertContentBoxCorrect_1ExpectedValues;
            }
        }
        
        public virtual AssertA1ValueUpdated2ExpectedValues AssertA1ValueUpdated2ExpectedValues
        {
            get
            {
                if ((this.mAssertA1ValueUpdated2ExpectedValues == null))
                {
                    this.mAssertA1ValueUpdated2ExpectedValues = new AssertA1ValueUpdated2ExpectedValues();
                }
                return this.mAssertA1ValueUpdated2ExpectedValues;
            }
        }
        
        public virtual UpdatedContentParams UpdatedContentParams
        {
            get
            {
                if ((this.mUpdatedContentParams == null))
                {
                    this.mUpdatedContentParams = new UpdatedContentParams();
                }
                return this.mUpdatedContentParams;
            }
        }
        
        public virtual UpdatedSpreadsheet1ExpectedValues UpdatedSpreadsheet1ExpectedValues
        {
            get
            {
                if ((this.mUpdatedSpreadsheet1ExpectedValues == null))
                {
                    this.mUpdatedSpreadsheet1ExpectedValues = new UpdatedSpreadsheet1ExpectedValues();
                }
                return this.mUpdatedSpreadsheet1ExpectedValues;
            }
        }
        
        public UIYexcelWindow UIYexcelWindow
        {
            get
            {
                if ((this.mUIYexcelWindow == null))
                {
                    this.mUIYexcelWindow = new UIYexcelWindow();
                }
                return this.mUIYexcelWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIClosingWindow UIClosingWindow
        {
            get
            {
                if ((this.mUIClosingWindow == null))
                {
                    this.mUIClosingWindow = new UIClosingWindow();
                }
                return this.mUIClosingWindow;
            }
        }
        #endregion
        
        #region Fields
        private BasicAddTestParams mBasicAddTestParams;
        
        private AssertConententsEqualExpectedValues mAssertConententsEqualExpectedValues;
        
        private UIBasicTest1Params mUIBasicTest1Params;
        
        private BasicFormulaErrorTest1Params mBasicFormulaErrorTest1Params;
        
        private AreTextBoxesEquallExpectedValues mAreTextBoxesEquallExpectedValues;
        
        private BasicFomulaErrorFixed1Params mBasicFomulaErrorFixed1Params;
        
        private AssertA1ValueUpdated1ExpectedValues mAssertA1ValueUpdated1ExpectedValues;
        
        private ArrowAndDeleteContents1Params mArrowAndDeleteContents1Params;
        
        private AssertContentBoxCorrect_1ExpectedValues mAssertContentBoxCorrect_1ExpectedValues;
        
        private AssertA1ValueUpdated2ExpectedValues mAssertA1ValueUpdated2ExpectedValues;
        
        private UpdatedContentParams mUpdatedContentParams;
        
        private UpdatedSpreadsheet1ExpectedValues mUpdatedSpreadsheet1ExpectedValues;
        
        private UIYexcelWindow mUIYexcelWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UIClosingWindow mUIClosingWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicAddTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class BasicAddTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '1+1' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "1+1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertConententsEqual'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertConententsEqualExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals '1+1'
        /// </summary>
        public string UITextBox_contentEditText = "1+1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UIBasicTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIBasicTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '1' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "1";
        
        /// <summary>
        /// Type '=a2' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText1 = "=a2";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicFormulaErrorTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class BasicFormulaErrorTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "";
        
        /// <summary>
        /// Type '=A2' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText1 = "=A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AreTextBoxesEquall'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AreTextBoxesEquallExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals '=A2'
        /// </summary>
        public string UITextBox_contentEditText = "=A2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_value' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UITextBox_valueEditText = "SpreadsheetUtilities.FormulaError";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_cellName' text box equals 'A1'
        /// </summary>
        public string UITextBox_cellNameEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicFomulaErrorFixed1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class BasicFomulaErrorFixed1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "1";
        
        /// <summary>
        /// Type 'A2' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText1 = "A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertA1ValueUpdated1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertA1ValueUpdated1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_value' text box equals '1'
        /// </summary>
        public string UITextBox_valueEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ArrowAndDeleteContents1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class ArrowAndDeleteContents1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "";
        
        /// <summary>
        /// Type '{Up}{Up}{Up}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Up}{Up}{Up}";
        
        /// <summary>
        /// Type '{Up}{Up}{Down}{Right}{Up}{Up}{Up}{Up}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys1 = "{Up}{Up}{Down}{Right}{Up}{Up}{Up}{Up}";
        
        /// <summary>
        /// Type '{Right}{Down}{Left}{Down}{Down}{Up}{Right}{Right}{Down}{Left}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys2 = "{Right}{Down}{Left}{Down}{Down}{Up}{Right}{Right}{Down}{Left}";
        
        /// <summary>
        /// Type '{Down}{Down}{Right}{Right}{Down}{Down}{Down}{Left}{Left}{Left}{Left}{Up}{Up}{Left}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys3 = "{Down}{Down}{Right}{Right}{Down}{Down}{Down}{Left}{Left}{Left}{Left}{Up}{Up}{Left" +
            "}";
        
        /// <summary>
        /// Type '' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText1 = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertContentBoxCorrect_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertContentBoxCorrect_1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals ''
        /// </summary>
        public string UITextBox_contentEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_value' text box equals ''
        /// </summary>
        public string UITextBox_valueEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertA1ValueUpdated2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertA1ValueUpdated2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_value' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UITextBox_valueEditText = "SpreadsheetUtilities.FormulaError";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals '=A2'
        /// </summary>
        public string UITextBox_contentEditText = "=A2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_cellName' text box equals 'A1'
        /// </summary>
        public string UITextBox_cellNameEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpdatedContent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UpdatedContentParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpdatedSpreadsheet1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UpdatedSpreadsheet1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals '1'
        /// </summary>
        public string UITextBox_contentEditText = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_cellName' text box equals 'A2'
        /// </summary>
        public string UITextBox_cellNameEditText = "A2";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYexcelWindow : WinWindow
    {
        
        public UIYexcelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Yexcel";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UITextBox_contentWindow UITextBox_contentWindow
        {
            get
            {
                if ((this.mUITextBox_contentWindow == null))
                {
                    this.mUITextBox_contentWindow = new UITextBox_contentWindow(this);
                }
                return this.mUITextBox_contentWindow;
            }
        }
        
        public UITextBox_valueWindow UITextBox_valueWindow
        {
            get
            {
                if ((this.mUITextBox_valueWindow == null))
                {
                    this.mUITextBox_valueWindow = new UITextBox_valueWindow(this);
                }
                return this.mUITextBox_valueWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public WinClient UIYexcelClient
        {
            get
            {
                if ((this.mUIYexcelClient == null))
                {
                    this.mUIYexcelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIYexcelClient.SearchProperties[WinControl.PropertyNames.Name] = "Yexcel";
                    this.mUIYexcelClient.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUIYexcelClient;
            }
        }
        
        public UIYexcelTitleBar UIYexcelTitleBar
        {
            get
            {
                if ((this.mUIYexcelTitleBar == null))
                {
                    this.mUIYexcelTitleBar = new UIYexcelTitleBar(this);
                }
                return this.mUIYexcelTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UITextBox_contentWindow mUITextBox_contentWindow;
        
        private UITextBox_valueWindow mUITextBox_valueWindow;
        
        private UIA1Window mUIA1Window;
        
        private WinClient mUIYexcelClient;
        
        private UIYexcelTitleBar mUIYexcelTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITextBox_contentWindow : WinWindow
    {
        
        public UITextBox_contentWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox_content";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox_contentEdit
        {
            get
            {
                if ((this.mUITextBox_contentEdit == null))
                {
                    this.mUITextBox_contentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox_contentEdit.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUITextBox_contentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox_contentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITextBox_valueWindow : WinWindow
    {
        
        public UITextBox_valueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox_value";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox_valueEdit
        {
            get
            {
                if ((this.mUITextBox_valueEdit == null))
                {
                    this.mUITextBox_valueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox_valueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Content";
                    this.mUITextBox_valueEdit.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUITextBox_valueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox_valueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox_cellName";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox_cellNameEdit
        {
            get
            {
                if ((this.mUITextBox_cellNameEdit == null))
                {
                    this.mUITextBox_cellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox_cellNameEdit.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUITextBox_cellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox_cellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYexcelTitleBar : WinTitleBar
    {
        
        public UIYexcelTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIClosingWindow : WinWindow
    {
        
        public UIClosingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Closing";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Closing");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Closing");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Closing");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
}
