// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SSCodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// add 1 to cell A1
        /// </summary>
        public void UIBasicTest1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIYexcelWindow = ApplicationUnderTest.Launch(this.UIBasicTest1Params.UIYexcelWindowExePath, this.UIBasicTest1Params.UIYexcelWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(94, 38));

            // Type '1' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.UIBasicTest1Params.UITextBox_contentEditText;

            // Type '{Enter}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.UIBasicTest1Params.UITextBox_contentEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// add 1 to A1 assert textboxes are correct
        /// </summary>
        public void BasicTest1Assert()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinEdit uITextBox_valueEdit = this.UIYexcelWindow.UITextBox_valueWindow.UITextBox_valueEdit;
            WinEdit uITextBox_cellNameEdit = this.UIYexcelWindow.UIA1Window.UITextBox_cellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_content' text box equals '1'
            Assert.AreEqual(this.BasicTest1AssertExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text, "should equal one");

            // Verify that the 'Text' property of 'textBox_value' text box equals '1'
            Assert.AreEqual(this.BasicTest1AssertExpectedValues.UITextBox_valueEditText, uITextBox_valueEdit.Text, "should equal 1");

            // Verify that the 'Text' property of 'textBox_cellName' text box equals 'A1'
            Assert.AreEqual(this.BasicTest1AssertExpectedValues.UITextBox_cellNameEditText, uITextBox_cellNameEdit.Text);
        }
        
        /// <summary>
        /// press down arrow check boxes for empty values
        /// </summary>
        public void DownArrowPressed()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Type '' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.DownArrowPressedParams.UITextBox_contentEditText;
        }
        
        /// <summary>
        /// DownArrowPressedAssert - Use 'DownArrowPressedAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void DownArrowPressedAssert()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinEdit uITextBox_cellNameEdit = this.UIYexcelWindow.UIA1Window.UITextBox_cellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_content' text box equals ''
            Assert.AreEqual(this.DownArrowPressedAssertExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text);

            // Verify that the 'Text' property of 'textBox_content' text box equals ''
            Assert.AreEqual(this.DownArrowPressedAssertExpectedValues.UITextBox_contentEditText1, uITextBox_contentEdit.Text);

            // Verify that the 'Text' property of 'textBox_cellName' text box equals 'A2'
            Assert.AreEqual(this.DownArrowPressedAssertExpectedValues.UITextBox_cellNameEditText, uITextBox_cellNameEdit.Text);

            // Verify that the 'Text' property of 'textBox_cellName' text box equals 'A2'
            Assert.AreEqual(this.DownArrowPressedAssertExpectedValues.UITextBox_cellNameEditText1, uITextBox_cellNameEdit.Text);
        }
        
        /// <summary>
        /// test that the Arrow keys are not cuasing any problems
        ///in literal corner cases
        /// </summary>
        public void CornersTest()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Type '' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.CornersTestParams.UITextBox_contentEditText;

            // Type '{Up}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.CornersTestParams.UITextBox_contentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(1023, 42));

            // Type '{Up}{Right}{Down}{Right}{Up}{Up}{Left}{Up}{Right}{Down}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.CornersTestParams.UITextBox_contentEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(1133, 660));

            // Type '{Right}{Down}{Down}{Left}{Down}{Down}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.CornersTestParams.UITextBox_contentEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(160, 680));

            // Type '{Down}{Left}{Down}{Up}{Left}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.CornersTestParams.UITextBox_contentEditSendKeys3, ModifierKeys.None);
        }
        
        /// <summary>
        /// entered fromula
        /// </summary>
        public void BasicFormulaEntered()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(46, 56));

            // Type '=1+1' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.BasicFormulaEnteredParams.UITextBox_contentEditText;

            // Type '{Enter}' in 'textBox_content' text box
            Keyboard.SendKeys(uITextBox_contentEdit, this.BasicFormulaEnteredParams.UITextBox_contentEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// BasicFormulaAssertMethod1 - Use 'BasicFormulaAssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void BasicFormulaAssertMethod1()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinEdit uITextBox_valueEdit = this.UIYexcelWindow.UITextBox_valueWindow.UITextBox_valueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_content' text box equals '=1+1'
            Assert.AreEqual(this.BasicFormulaAssertMethod1ExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text);

            // Verify that the 'Text' property of 'textBox_value' text box equals '2'
            Assert.AreEqual(this.BasicFormulaAssertMethod1ExpectedValues.UITextBox_valueEditText, uITextBox_valueEdit.Text);
        }
        
        /// <summary>
        /// add =A4 to A3 to generate a formula Error
        /// </summary>
        public void FormulaErrorTest()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Type '=A4' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.FormulaErrorTestParams.UITextBox_contentEditText;

            // Type '' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.FormulaErrorTestParams.UITextBox_contentEditText1;
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uITextBox_cellNameEdit = this.UIYexcelWindow.UIA1Window.UITextBox_cellNameEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_cellName' text box equals 'A4'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UITextBox_cellNameEditText, uITextBox_cellNameEdit.Text);
        }
        
        /// <summary>
        /// UpArrow - Use 'UpArrowParams' to pass parameters into this method.
        /// </summary>
        public void UpArrow()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinClient uISpreadsheetPanel1Client = this.UIYexcelWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Type '=A4' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.UpArrowParams.UITextBox_contentEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(49, 95));

            // Type '=A4' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.UpArrowParams.UITextBox_contentEditText1;
        }
        
        /// <summary>
        /// AsserFormulaError - Use 'AsserFormulaErrorExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AsserFormulaError()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinEdit uITextBox_valueEdit = this.UIYexcelWindow.UITextBox_valueWindow.UITextBox_valueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_content' text box equals '=A4'
            Assert.AreEqual(this.AsserFormulaErrorExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text);

            // Verify that the 'Text' property of 'textBox_value' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.AsserFormulaErrorExpectedValues.UITextBox_valueEditText, uITextBox_valueEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            #endregion

            // Type '12' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.RecordedMethod1Params.UITextBox_contentEditText;

            // Type '=A4' in 'textBox_content' text box
            uITextBox_contentEdit.Text = this.RecordedMethod1Params.UITextBox_contentEditText1;
        }
        
        /// <summary>
        /// AssertFormulaErrorFixed - Use 'AssertFormulaErrorFixedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertFormulaErrorFixed()
        {
            #region Variable Declarations
            WinEdit uITextBox_contentEdit = this.UIYexcelWindow.UITextBox_contentWindow.UITextBox_contentEdit;
            WinEdit uITextBox_valueEdit = this.UIYexcelWindow.UITextBox_valueWindow.UITextBox_valueEdit;
            #endregion

            // Verify that the 'Text' property of 'textBox_content' text box equals '=A4'
            Assert.AreEqual(this.AssertFormulaErrorFixedExpectedValues.UITextBox_contentEditText, uITextBox_contentEdit.Text);

            // Verify that the 'Text' property of 'textBox_value' text box equals '12'
            Assert.AreEqual(this.AssertFormulaErrorFixedExpectedValues.UITextBox_valueEditText, uITextBox_valueEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UIYexcelWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuItem uICloseMenuItem = this.UIYexcelWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uINOButton = this.UIClosingWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(23, 13));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(58, 6));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(56, 17));
        }
        
        #region Properties
        public virtual UIBasicTest1Params UIBasicTest1Params
        {
            get
            {
                if ((this.mUIBasicTest1Params == null))
                {
                    this.mUIBasicTest1Params = new UIBasicTest1Params();
                }
                return this.mUIBasicTest1Params;
            }
        }
        
        public virtual BasicTest1AssertExpectedValues BasicTest1AssertExpectedValues
        {
            get
            {
                if ((this.mBasicTest1AssertExpectedValues == null))
                {
                    this.mBasicTest1AssertExpectedValues = new BasicTest1AssertExpectedValues();
                }
                return this.mBasicTest1AssertExpectedValues;
            }
        }
        
        public virtual DownArrowPressedParams DownArrowPressedParams
        {
            get
            {
                if ((this.mDownArrowPressedParams == null))
                {
                    this.mDownArrowPressedParams = new DownArrowPressedParams();
                }
                return this.mDownArrowPressedParams;
            }
        }
        
        public virtual DownArrowPressedAssertExpectedValues DownArrowPressedAssertExpectedValues
        {
            get
            {
                if ((this.mDownArrowPressedAssertExpectedValues == null))
                {
                    this.mDownArrowPressedAssertExpectedValues = new DownArrowPressedAssertExpectedValues();
                }
                return this.mDownArrowPressedAssertExpectedValues;
            }
        }
        
        public virtual CornersTestParams CornersTestParams
        {
            get
            {
                if ((this.mCornersTestParams == null))
                {
                    this.mCornersTestParams = new CornersTestParams();
                }
                return this.mCornersTestParams;
            }
        }
        
        public virtual BasicFormulaEnteredParams BasicFormulaEnteredParams
        {
            get
            {
                if ((this.mBasicFormulaEnteredParams == null))
                {
                    this.mBasicFormulaEnteredParams = new BasicFormulaEnteredParams();
                }
                return this.mBasicFormulaEnteredParams;
            }
        }
        
        public virtual BasicFormulaAssertMethod1ExpectedValues BasicFormulaAssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mBasicFormulaAssertMethod1ExpectedValues == null))
                {
                    this.mBasicFormulaAssertMethod1ExpectedValues = new BasicFormulaAssertMethod1ExpectedValues();
                }
                return this.mBasicFormulaAssertMethod1ExpectedValues;
            }
        }
        
        public virtual FormulaErrorTestParams FormulaErrorTestParams
        {
            get
            {
                if ((this.mFormulaErrorTestParams == null))
                {
                    this.mFormulaErrorTestParams = new FormulaErrorTestParams();
                }
                return this.mFormulaErrorTestParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual UpArrowParams UpArrowParams
        {
            get
            {
                if ((this.mUpArrowParams == null))
                {
                    this.mUpArrowParams = new UpArrowParams();
                }
                return this.mUpArrowParams;
            }
        }
        
        public virtual AsserFormulaErrorExpectedValues AsserFormulaErrorExpectedValues
        {
            get
            {
                if ((this.mAsserFormulaErrorExpectedValues == null))
                {
                    this.mAsserFormulaErrorExpectedValues = new AsserFormulaErrorExpectedValues();
                }
                return this.mAsserFormulaErrorExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertFormulaErrorFixedExpectedValues AssertFormulaErrorFixedExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaErrorFixedExpectedValues == null))
                {
                    this.mAssertFormulaErrorFixedExpectedValues = new AssertFormulaErrorFixedExpectedValues();
                }
                return this.mAssertFormulaErrorFixedExpectedValues;
            }
        }
        
        public UIYexcelWindow UIYexcelWindow
        {
            get
            {
                if ((this.mUIYexcelWindow == null))
                {
                    this.mUIYexcelWindow = new UIYexcelWindow();
                }
                return this.mUIYexcelWindow;
            }
        }
        
        public UIClosingWindow UIClosingWindow
        {
            get
            {
                if ((this.mUIClosingWindow == null))
                {
                    this.mUIClosingWindow = new UIClosingWindow();
                }
                return this.mUIClosingWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIBasicTest1Params mUIBasicTest1Params;
        
        private BasicTest1AssertExpectedValues mBasicTest1AssertExpectedValues;
        
        private DownArrowPressedParams mDownArrowPressedParams;
        
        private DownArrowPressedAssertExpectedValues mDownArrowPressedAssertExpectedValues;
        
        private CornersTestParams mCornersTestParams;
        
        private BasicFormulaEnteredParams mBasicFormulaEnteredParams;
        
        private BasicFormulaAssertMethod1ExpectedValues mBasicFormulaAssertMethod1ExpectedValues;
        
        private FormulaErrorTestParams mFormulaErrorTestParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private UpArrowParams mUpArrowParams;
        
        private AsserFormulaErrorExpectedValues mAsserFormulaErrorExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertFormulaErrorFixedExpectedValues mAssertFormulaErrorFixedExpectedValues;
        
        private UIYexcelWindow mUIYexcelWindow;
        
        private UIClosingWindow mUIClosingWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UIBasicTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIBasicTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowExePath = "C:\\Users\\yeates\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadsh" +
            "eetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIYexcelWindowAlternateExePath = "%USERPROFILE%\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '1' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicTest1Assert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class BasicTest1AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals '1'
        /// </summary>
        public string UITextBox_contentEditText = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_value' text box equals '1'
        /// </summary>
        public string UITextBox_valueEditText = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_cellName' text box equals 'A1'
        /// </summary>
        public string UITextBox_cellNameEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DownArrowPressed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class DownArrowPressedParams
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DownArrowPressedAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class DownArrowPressedAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals ''
        /// </summary>
        public string UITextBox_contentEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals ''
        /// </summary>
        public string UITextBox_contentEditText1 = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_cellName' text box equals 'A2'
        /// </summary>
        public string UITextBox_cellNameEditText = "A2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_cellName' text box equals 'A2'
        /// </summary>
        public string UITextBox_cellNameEditText1 = "A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CornersTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class CornersTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "";
        
        /// <summary>
        /// Type '{Up}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Up}";
        
        /// <summary>
        /// Type '{Up}{Right}{Down}{Right}{Up}{Up}{Left}{Up}{Right}{Down}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys1 = "{Up}{Right}{Down}{Right}{Up}{Up}{Left}{Up}{Right}{Down}";
        
        /// <summary>
        /// Type '{Right}{Down}{Down}{Left}{Down}{Down}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys2 = "{Right}{Down}{Down}{Left}{Down}{Down}";
        
        /// <summary>
        /// Type '{Down}{Left}{Down}{Up}{Left}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys3 = "{Down}{Left}{Down}{Up}{Left}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicFormulaEntered'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class BasicFormulaEnteredParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=1+1' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "=1+1";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicFormulaAssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class BasicFormulaAssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals '=1+1'
        /// </summary>
        public string UITextBox_contentEditText = "=1+1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_value' text box equals '2'
        /// </summary>
        public string UITextBox_valueEditText = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaErrorTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class FormulaErrorTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=A4' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "=A4";
        
        /// <summary>
        /// Type '' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText1 = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_cellName' text box equals 'A4'
        /// </summary>
        public string UITextBox_cellNameEditText = "A4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpArrow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UpArrowParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=A4' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "=A4";
        
        /// <summary>
        /// Type '=A4' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText1 = "=A4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AsserFormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AsserFormulaErrorExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals '=A4'
        /// </summary>
        public string UITextBox_contentEditText = "=A4";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_value' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UITextBox_valueEditText = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '12' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText = "12";
        
        /// <summary>
        /// Type '=A4' in 'textBox_content' text box
        /// </summary>
        public string UITextBox_contentEditText1 = "=A4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaErrorFixed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertFormulaErrorFixedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_content' text box equals '=A4'
        /// </summary>
        public string UITextBox_contentEditText = "=A4";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBox_value' text box equals '12'
        /// </summary>
        public string UITextBox_valueEditText = "12";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYexcelWindow : WinWindow
    {
        
        public UIYexcelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Yexcel";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UITextBox_contentWindow UITextBox_contentWindow
        {
            get
            {
                if ((this.mUITextBox_contentWindow == null))
                {
                    this.mUITextBox_contentWindow = new UITextBox_contentWindow(this);
                }
                return this.mUITextBox_contentWindow;
            }
        }
        
        public UITextBox_valueWindow UITextBox_valueWindow
        {
            get
            {
                if ((this.mUITextBox_valueWindow == null))
                {
                    this.mUITextBox_valueWindow = new UITextBox_valueWindow(this);
                }
                return this.mUITextBox_valueWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UITextBox_contentWindow mUITextBox_contentWindow;
        
        private UITextBox_valueWindow mUITextBox_valueWindow;
        
        private UIA1Window mUIA1Window;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITextBox_contentWindow : WinWindow
    {
        
        public UITextBox_contentWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox_content";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox_contentEdit
        {
            get
            {
                if ((this.mUITextBox_contentEdit == null))
                {
                    this.mUITextBox_contentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox_contentEdit.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUITextBox_contentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox_contentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITextBox_valueWindow : WinWindow
    {
        
        public UITextBox_valueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox_value";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox_valueEdit
        {
            get
            {
                if ((this.mUITextBox_valueEdit == null))
                {
                    this.mUITextBox_valueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox_valueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Content";
                    this.mUITextBox_valueEdit.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUITextBox_valueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox_valueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox_cellName";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox_cellNameEdit
        {
            get
            {
                if ((this.mUITextBox_cellNameEdit == null))
                {
                    this.mUITextBox_cellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox_cellNameEdit.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUITextBox_cellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox_cellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Yexcel");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Yexcel");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIClosingWindow : WinWindow
    {
        
        public UIClosingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Closing";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Closing");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Closing");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Closing");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
}
