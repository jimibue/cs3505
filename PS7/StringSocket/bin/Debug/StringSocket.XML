<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StringSocket</name>
    </assembly>
    <members>
        <member name="T:CustomNetworking.StringSocket">
             <summary>
             A StringSocket is a wrapper around a Socket.  It provides methods that
             asynchronously read lines of text (strings terminated by newlines) and 
             write strings. (As opposed to Sockets, which read and write raw bytes.)  
            
             StringSockets are thread safe.  This means that two or more threads may
             invoke methods on a shared StringSocket without restriction.  The
             StringSocket takes care of the synchonization.
             
             Each StringSocket contains a Socket object that is provided by the client.  
             A StringSocket will work properly only if the client refrains from calling
             the contained Socket's read and write methods.
             
             If we have an open Socket s, we can create a StringSocket by doing
             
                StringSocket ss = new StringSocket(s, new UTF8Encoding());
             
             We can write a string to the StringSocket by doing
             
                ss.BeginSend("Hello world", callback, payload);
                
             where callback is a SendCallback (see below) and payload is an arbitrary object.
             This is a non-blocking, asynchronous operation.  When the StringSocket has 
             successfully written the string to the underlying Socket, or failed in the 
             attempt, it invokes the callback.  The parameters to the callback are a
             (possibly null) Exception and the payload.  If the Exception is non-null, it is
             the Exception that caused the send attempt to fail.
             
             We can read a string from the StringSocket by doing
             
                 ss.BeginReceive(callback, payload)
                 
             where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
             This is non-blocking, asynchronous operation.  When the StringSocket has read a
             string of text terminated by a newline character from the underlying Socket, or
             failed in the attempt, it invokes the callback.  The parameters to the callback are
             a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
             string or the Exception will be non-null, but nor both.  If the string is non-null, 
             it is the requested string (with the newline removed).  If the Exception is non-null, 
             it is the Exception that caused the send attempt to fail.
             </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.socket">
            <summary>
            The underlying socket that this StringSocket uses to send and receive bytes of data.
            </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.encoding">
            <summary>
            The character encoding to use to encode or decode data to send or receive through 
            the underlying socket.
            </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.outgoing">
            <summary>
            Text that needs to be sent to the client but has not yet gone.
            </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.incoming">
            <summary>
            Text that has been received from the client but not yet been dealt with.
            </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.buffer">
            <summary>
            Used by the BeginReceive private helper methods to hold the bytes
            that were received by the underlying socket.
            </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.SendQueue">
            <summary>
            Holds pending send requests.
            </summary>
        </member>
        <member name="F:CustomNetworking.StringSocket.ReceiveQueue">
            <summary>
            Holds pending receive requests.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.#ctor(System.Net.Sockets.Socket,System.Text.Encoding)">
            <summary>
            Creates a StringSocket from a regular Socket, which should already be connected.  
            The read and write methods of the regular Socket must not be called after the
            LineSocket is created.  Otherwise, the StringSocket will not behave properly.  
            The encoding to use to convert between raw bytes and strings is also provided.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.BeginSend(System.String,CustomNetworking.StringSocket.SendCallback,System.Object)">
            <summary>
            We can write a string to a StringSocket ss by doing
            
               ss.BeginSend("Hello world", callback, payload);
               
            where callback is a SendCallback (see below) and payload is an arbitrary object.
            This is a non-blocking, asynchronous operation.  When the StringSocket has 
            successfully written the string to the underlying Socket, or failed in the 
            attempt, it invokes the callback.  The parameters to the callback are a
            (possibly null) Exception and the payload.  If the Exception is non-null, it is
            the Exception that caused the send attempt to fail. 
            
            This method is non-blocking.  This means that it does not wait until the string
            has been sent before returning.  Instead, it arranges for the string to be sent
            and then returns.  When the send is completed (at some time in the future), the
            callback is called on another thread.
            
            This method is thread safe.  This means that multiple threads can call BeginSend
            on a shared socket without worrying around synchronization.  The implementation of
            BeginSend must take care of synchronization instead.  On a given StringSocket, each
            string arriving via a BeginSend method call must be sent (in its entirety) before
            a later arriving string can be sent.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.SendBytes">
            <summary>
            Checks if the entire message has been sent. If the message hasn't been sent
            or there is another request, begin sending it.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.MessageSent(System.IAsyncResult)">
            <summary>
            Called when a message has been successfully sent.
            
            Decodes the unsent bytes and tries sending them again.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.BeginReceive(CustomNetworking.StringSocket.ReceiveCallback,System.Object)">
            <summary>
            We can read a string from the StringSocket by doing
            
                ss.BeginReceive(callback, payload)
            
            where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
            This is non-blocking, asynchronous operation.  When the StringSocket has read a
            string of text terminated by a newline character from the underlying Socket, or
            failed in the attempt, it invokes the callback.  The parameters to the callback are
            a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
            string or the Exception will be non-null, but nor both.  If the string is non-null, 
            it is the requested string (with the newline removed).  If the Exception is non-null, 
            it is the Exception that caused the send attempt to fail.
            
            This method is non-blocking.  This means that it does not wait until a line of text
            has been received before returning.  Instead, it arranges for a line to be received
            and then returns.  When the line is actually received (at some time in the future), the
            callback is called on another thread.
            
            This method is thread safe.  This means that multiple threads can call BeginReceive
            on a shared socket without worrying around synchronization.  The implementation of
            BeginReceive must take care of synchronization instead.  On a given StringSocket, each
            arriving line of text must be passed to callbacks in the order in which the corresponding
            BeginReceive call arrived.
            
            Note that it is possible for there to be incoming bytes arriving at the underlying Socket
            even when there are no pending callbacks.  StringSocket implementations should refrain
            from buffering an unbounded number of incoming bytes beyond what is required to service
            the pending callbacks.        
            
            <param name="callback"> The function to call upon receiving the data</param>
            <param name="payload"> 
            The payload is "remembered" so that when the callback is invoked, it can be associated
            with a specific Begin Receiver....
            </param>  
            
            <example>
              Here is how you might use this code:
              <code>
                               client = new TcpClient("localhost", port);
                               Socket       clientSocket = client.Client;
                               StringSocket receiveSocket = new StringSocket(clientSocket, new UTF8Encoding());
                               receiveSocket.BeginReceive(CompletedReceive1, 1);
            
              </code>
            </example>
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.ProcessReceivedMessage">
            <summary>
            Processes a received message by looking for a newline character to satisfy a receive 
            request. If no newlines are found and there are requests, asks for more data.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.MessageReceived(System.IAsyncResult)">
            <summary>
            Called when some data has been received.
            
            Gets the bytes that were received, stores them in a string, and
            calls a method to process the received message.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.Close">
             <summary>
             Calling the close method will close the String Socket (and the underlying
             standard socket).  The close method  should make sure all 
            
             Note: ideally the close method should make sure all pending data is sent
                   
             Note: closing the socket should discard any remaining messages and       
                   disable receiving new messages
             
             Note: Make sure to shutdown the socket before closing it.
            
             Note: the socket should not be used after closing.
             </summary>
        </member>
        <member name="T:CustomNetworking.StringSocket.SendRequest">
            <summary>
            Struct used to store a single send request.
            Each send request has a message, a SendCallback, and a payload.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.SendRequest.#ctor(System.String,CustomNetworking.StringSocket.SendCallback,System.Object)">
            <summary>
            Creates a SendRequest with the given message, SendCallback, and payload.
            </summary>
        </member>
        <member name="T:CustomNetworking.StringSocket.ReceiveRequest">
            <summary>
            Struct used to store a single receive request.
            Each receive request has a ReceiveCallback and a payload.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.ReceiveRequest.#ctor(CustomNetworking.StringSocket.ReceiveCallback,System.Object)">
            <summary>
            Creates a SendRequest with the given ReceiveCallback and payload.
            </summary>
        </member>
    </members>
</doc>
