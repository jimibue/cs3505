using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.Net.Sockets;
using CustomNetworking;

namespace CC
{
    public class BoggleClientModel
    {
        public string msgString;

        private bool validName = false;

        // The socket used to communicate with the server.  If no connection has been
        // made yet, this is null.
        private StringSocket socket;

        //
        // PAY ATTENTION: this is one of the most interesting features in the program!
        // Register for this event to be motified when a line of text arrives.
        public event Action<String> IncomingLineEvent;

        //
        // PAY ATTENTION: this is one of the most interesting features in the program!
        // Register for this event to be motified when a line of text arrives.
        public event Action<String> IncomingTimeEvent;

        /// <summary>
        /// Creates a not yet connected client model.
        /// </summary>
        public BoggleClientModel()
        {
            socket = null;
        }

        /// <summary>
        /// Connect to the server at the given hostname and port and with the give name.
        /// </summary>
        public void Connect(string hostname, int port, String name)
        {
            if (socket == null||!validName )
            {
                if (name.StartsWith("PLAY ") && name.Substring(5).Trim().Length > 0)
                    validName = true;
                
                TcpClient client = new TcpClient(hostname, port);
                socket = new StringSocket(client.Client, UTF8Encoding.Default);

                socket.BeginSend(name + "\n", (e, p) => { }, null);
                socket.BeginReceive(LineReceived, null);
            }
        }

        /// <summary>
        /// Send a line of text to the server.
        /// </summary>
        /// <param name="line"></param>
        public void SendMessage(String line)
        {
            if (socket != null)
            {
                socket.BeginSend(line + "\n", (e, p) => { }, null);
            }
        }

        /// <summary>
        /// Deal with an arriving line of text.
        /// </summary>
        private void LineReceived(String s, Exception e, object p)
        {
            if ((s == null && e == null) || e != null)
            {
                //this.socket.Close();
                return;
            }

            if (s.StartsWith("TIME "))
            {
                if (IncomingTimeEvent != null)
                {
                    IncomingTimeEvent(s);
                }
            }
            else
            {
                msgString = s;

                if (IncomingLineEvent != null)
                {
                    IncomingLineEvent(s);
                }
            }

            // Listen for another message.
            socket.BeginReceive(LineReceived, null);
        }

        /// <summary>
        /// Send a line of text to the server.
        /// </summary>
        /// <param name="line"></param>
        public void SendGoMessage(String line)
        {
            if (socket != null)
            {
                socket.BeginSend(line + "\n", (e, p) => { }, null);
            }
        }

        public void disconnect()
        {
            socket.Close();
        }
    }
}

