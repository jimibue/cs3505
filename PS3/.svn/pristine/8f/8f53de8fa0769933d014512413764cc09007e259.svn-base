// Skeleton written by Joe Zachary for CS 3500, September 2013
// Read the entire skeleton carefully and completely before you
// do anything else!

// Version 1.1 (9/22/13 11:45 a.m.)

// Change log:
//  (Version 1.1) Repaired mistake in GetTokens
//  (Version 1.1) Changed specification of second constructor to
//                clarify description of how validation works

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using FormulaEvaluator;

namespace SpreadsheetUtilities
{

  
    /// <summary>
    /// Represents formulas written in standard infix notation using standard precedence
    /// rules.  The allowed symbols are non-negative numbers written using double-precision 
    /// floating-point syntax; variables that consist of a letter or underscore followed by 
    /// zero or more letters, underscores, or digits; parentheses; and the four operator 
    /// symbols +, -, *, and /.  
    /// 
    /// Spaces are significant only insofar that they delimit tokens.  For example, "xy" is
    /// a single variable, "x y" consists of two variables "x" and y; "x23" is a single variable; 
    /// and "x 23" consists of a variable "x" and a number "23".
    /// 
    /// Associated with every formula are two delegates:  a normalizer and a validator.  The
    /// normalizer is used to convert variables into a canonical form, and the validator is used
    /// to add extra restrictions on the validity of a variable (beyond the standard requirement 
    /// that it consist of a letter or underscore followed by zero or more letters, underscores,
    /// or digits.)  Their use is described in detail in the constructor and method comments.
    /// </summary>
    public class Formula
    {
        private IEnumerable<string> tokens;

        /// <summary>
        /// Creates a Formula from a string that consists of an infix expression written as
        /// described in the class comment.  If the expression is syntactically invalid,
        /// throws a FormulaFormatException with an explanatory Message.
        /// 
        /// The associated normalizer is the identity function, and the associated validator
        /// maps every string to true.  
        /// </summary>
        public Formula(String formula) :
            this(formula, s => s, s => true)
        {
        }

        /// <summary>
        /// Creates a Formula from a string that consists of an infix expression written as
        /// described in the class comment.  If the expression is syntactically incorrect,
        /// throws a FormulaFormatException with an explanatory Message.
        /// 
        /// The associated normalizer and validator are the second and third parameters,
        /// respectively.  
        /// 
        /// If the formula contains a variable v such that normalize(v) is not a legal variable, 
        /// throws a FormulaFormatException with an explanatory message. 
        /// 
        /// If the formula contains a variable v such that isValid(normalize(v)) is false,
        /// throws a FormulaFormatException with an explanatory message.
        /// 
        /// Suppose that N is a method that converts all the letters in a string to upper case, and
        /// that V is a method that returns true only if a string consists of one letter followed
        /// by one digit.  Then:
        /// 
        /// new Formula("x2+y3", N, V) should succeed
        /// new Formula("x+y3", N, V) should throw an exception, since V(N("x")) is false
        /// new Formula("2x+y3", N, V) should throw an exception, since "2x+y3" is syntactically incorrect.
        /// </summary>
        public Formula(String formula, Func<string, string> normalize, Func<string, bool> isValid)
        {
            //check to see if equation is in proper form, seem to be doing a run here double here
            //tokens = GetTokens(formula);
            //IsCorrectFormula(tokens);

            //normalize the formula
            string normalizedString = normalize(formula);

            //test id Valid
            if (!isValid(normalizedString)) throw new FormulaFormatException(formula + " is not a valid form");
            tokens = GetTokens(normalizedString);
            IsCorrectFormula(tokens);
        }




        /// <summary>
        /// Evaluates this Formula, using the lookup delegate to determine the values of
        /// variables.  When a variable symbol v needs to be determined, it should be looked up
        /// via lookup(normalize(v)). (Here, normalize is the normalizer that was passed to 
        /// the constructor.)
        /// 
        /// For example, if L("x") is 2, L("X") is 4, and N is a method that converts all the letters 
        /// in a string to upper case:
        /// 
        /// new Formula("x+7", N, s => true).Evaluate(L) is 11
        /// new Formula("x+7").Evaluate(L) is 9
        /// 
        /// Given a variable symbol as its parameter, lookup returns the variable's value 
        /// (if it has one) or throws an ArgumentException (otherwise).
        /// 
        /// If no undefined variables or divisions by zero are encountered when evaluating 
        /// this Formula, the value is returned.  Otherwise, a FormulaError is returned.  
        /// The Reason property of the FormulaError should have a meaningful explanation.
        ///
        /// This method should never throw an exception.
        /// </summary>
        public object Evaluate(Func<string, double> lookup)
        {
            //get valid vars
           IEnumerable<string> validVars = this.GetVariables();
            try
            {
                return  Evaluator.EvaluateDouble(tokens, lookup, validVars);
            }
            catch (ArgumentException e)
            {
                return new FormulaError (this.ToString() + " Is not valid: " + e.Message);
            }
            //modified Evaluate Method

        }

        /// <summary>
        /// Enumerates the normalized versions of all of the variables that occur in this 
        /// formula.  No normalization may appear more than once in the enumeration, even 
        /// if it appears more than once in this Formula.
        /// 
        /// For example, if N is a method that converts all the letters in a string to upper case:
        /// 
        /// new Formula("x+y*z", N, s => true).GetVariables() should enumerate "X", "Y", and "Z"
        /// new Formula("x+X*z", N, s => true).GetVariables() should enumerate "X" and "Z".
        /// new Formula("x+X*z").GetVariables() should enumerate "x", "X", and "z".
        /// </summary>
        public IEnumerable<String> GetVariables()
        {
            HashSet<string> variables = new HashSet<string>();
            foreach(string str in tokens)
            {
                if (str.isVariable())
                    variables.Add(str);
            }
            //loop through tokens pull out variables
           // System.Diagnostics.Debug.WriteLine(variables.Count);
            return variables;
        }

        /// <summary>
        /// Returns a string containing no spaces which, if passed to the Formula
        /// constructor, will produce a Formula f such that this.Equals(f).  All of the
        /// variables in the string should be normalized.
        /// 
        /// For example, if N is a method that converts all the letters in a string to upper case:
        /// 
        /// new Formula("x + y", N, s => true).ToString() should return "X+Y"
        /// new Formula("x + Y").ToString() should return "x+Y"
        /// </summary>
        public override string ToString()
        {
            StringBuilder theString = new StringBuilder();
            foreach (string str in tokens)
                theString.Append(str);
            return theString.ToString();
        }

        /// <summary>
        /// If obj is null or obj is not a Formula, returns false.  Otherwise, reports
        /// whether or not this Formula and obj are equal.
        /// 
        /// Two Formulae are considered equal if they consist of the same tokens in the
        /// same order.  To determine token equality, all tokens are compared as strings 
        /// except for numeric tokens, which are compared as doubles, and variable tokens,
        /// whose normalized forms are compared as strings.
        /// 
        /// For example, if N is a method that converts all the letters in a string to upper case:
        ///  
        /// new Formula("x1+y2", N, s => true).Equals(new Formula("X1  +  Y2")) is true
        /// new Formula("x1+y2").Equals(new Formula("X1+Y2")) is false
        /// new Formula("x1+y2").Equals(new Formula("y2+x1")) is false
        /// new Formula("2.0 + x7").Equals(new Formula("2.000 + x7")) is true
        /// </summary>
        public override bool Equals(object obj)
        {
            //if obj is not a Formula newObj will be null
            Formula newObj = obj as Formula;

            //first check if newObject is null (if true short circuit false) if compare string values
            return !ReferenceEquals(newObj, null) &&
                this.ToString().Equals(newObj.ToString());
        }

        /// <summary>
        /// Reports whether f1 == f2, using the notion of equality from the Equals method.
        /// Note that if both f1 and f2 are null, this method should return true.  If one is
        /// null and one is not, this method should return false.
        /// </summary>
        public static bool operator ==(Formula f1, Formula f2)
        {
            if (ReferenceEquals(f1, null))
                return ReferenceEquals(f2, null);
            return f1.Equals(f2);
        }


        /// <summary>
        /// Reports whether f1 != f2, using the notion of equality from the Equals method.
        /// Note that if both f1 and f2 are null, this method should return false.  If one is
        /// null and one is not, this method should return true.
        /// </summary>
        public static bool operator !=(Formula f1, Formula f2)
        {
            if (ReferenceEquals(f1, null))
                return !ReferenceEquals(f2, null);
            return !f1.Equals(f2);
        }

        /// <summary>
        /// Returns a hash code for this Formula.  If f1.Equals(f2), then it must be the
        /// case that f1.GetHashCode() == f2.GetHashCode().  Ideally, the probability that two 
        /// randomly-generated unequal Formulae have the same hash code should be extremely small.
        /// </summary>
        public override int GetHashCode()
        {
            //empty formulas are not allowed so it must iterate though loop at least once
            int hashCode =0;
            foreach(char c in this.ToString())
            {
                hashCode = c * 13;
            }
            //make sure a int is returned that does not overflow
            return hashCode % (int.MaxValue-1);
        }

        /// <summary>
        /// Given an expression, enumerates the tokens that compose it.  Tokens are left paren;
        /// right paren; one of the four operator symbols; a string consisting of a letter or underscore
        /// followed by zero or more letters, digits, or underscores; a double literal; and anything that doesn't
        /// match one of those patterns.  There are no empty tokens, and no token contains white space.
        /// </summary>
        private static IEnumerable<string> GetTokens(String formula)
        {
            // Patterns for individual tokens
            String lpPattern = @"\(";
            String rpPattern = @"\)";
            String opPattern = @"[\+\-*/]";
            String varPattern = @"[a-zA-Z_](?: [a-zA-Z_]|\d)*";
            String doublePattern = @"(?: \d+\.\d* | \d*\.\d+ | \d+ ) (?: [eE][\+-]?\d+)?";
            String spacePattern = @"\s+";

            // Overall pattern
            String pattern = String.Format("({0}) | ({1}) | ({2}) | ({3}) | ({4}) | ({5})",
                                            lpPattern, rpPattern, opPattern, varPattern, doublePattern, spacePattern);

            // Enumerate matching tokens that don't consist solely of white space.
            foreach (String s in Regex.Split(formula, pattern, RegexOptions.IgnorePatternWhitespace))
            {
                if (!Regex.IsMatch(s, @"^\s*$", RegexOptions.Singleline))
                {
                    yield return s;
                }
            }

        }

        private void IsCorrectFormula(IEnumerable<string> tokens)
        {
            int leftParen = 0;
            int rightParen = 0;
            string lastToken = "";

            //special cases
            if (tokens.Count() == 0)
                throw new FormulaFormatException(" empty formula");
            //check first token
            string firstElm = tokens.ElementAt(0);
            if (!(firstElm.isNumber() || firstElm.isVariable() || firstElm.Equals("(")))
                throw new FormulaFormatException(this.ToString() + " is not a legal expresion, first expresion");

            //check last token
            string lastElm = tokens.ElementAt(tokens.Count() - 1);
            if (!(lastElm.isNumber() || lastElm.isVariable() || lastElm.Equals(")")))
                throw new FormulaFormatException(this.ToString() + " is not a legal expresion, last expresion");

            foreach (string str in tokens)
            {

                if (str.isNumber())
                {
                    checkLastToken(lastToken, "double");
                    lastToken = "double";
                    continue;
                }
                else if (str.isOpORLetter())
                {

                    if (str[0].isParenthesis())
                        KeepTrackParen(str[0], ref rightParen, ref leftParen);
                    if (str.isVariable())
                    {
                        checkLastToken(lastToken, "var");
                        lastToken = "var";
                    }
                    else
                    {
                        checkLastToken(lastToken, str);
                        lastToken = str;
                    }
                    continue;
                }
                else if (str.isVariable())
                {
                    checkLastToken(lastToken, "var");
                    lastToken = "var";
                    continue;
                }
                else
                    throw new FormulaFormatException(this.ToString() + " is not a legal expresion");
            }
            if (leftParen != rightParen)
                throw new FormulaFormatException(this.ToString() + " is not a legal expresion");
        }

        private void checkLastToken(string lastToken, string currentToken)
        {
            if (lastToken.Equals("(") || lastToken.isOperator())
            {
                if (!(currentToken.Equals("(") || currentToken.Equals("var") || currentToken.Equals("double")))
                    throw new FormulaFormatException(this.ToString() + " is not a legal expresion");
            }
            else if (lastToken.Equals("double") || lastToken.Equals("var") || lastToken.Equals(")"))
            {
                if (!(currentToken.isOperator() || currentToken.Equals(")")))
                    throw new FormulaFormatException(this.ToString() + " is not a legal expresion");
            }
        }

        private void KeepTrackParen(char p, ref int rightParen, ref int leftParen)
        {
            if (p == '(')
                leftParen++;
            else
                rightParen++;
            if (rightParen > leftParen)
                throw new FormulaFormatException(this.ToString() + " is not a legal expresion");

        }
    }

    /// <summary>
    /// Used to report syntactic errors in the argument to the Formula constructor.
    /// </summary>
    public class FormulaFormatException : Exception
    {
        /// <summary>
        /// Constructs a FormulaFormatException containing the explanatory message.
        /// </summary>
        public FormulaFormatException(String message)
            : base(message)
        {
        }
    }

    /// <summary>
    /// Used as a possible return value of the Formula.Evaluate method.
    /// </summary>
    public struct FormulaError
    {
        /// <summary>
        /// Constructs a FormulaError containing the explanatory reason.
        /// </summary>
        /// <param name="reason"></param>
        public FormulaError(String reason)
            : this()
        {
            Reason = reason;
        }

        /// <summary>
        ///  The reason why this FormulaError was created.
        /// </summary>
        public string Reason { get; private set; }
    }
}

