using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;



namespace FormulaEvaluator
{
       /// <summary>
       /// This class takes a math expression as a string and evaluates the result.  Accetable 
       /// math operations are numbers (doubles accetpted but will be converted to ints). 
       /// +, /, * -, 9, (, ), are excepted.  This program will throw an argument exception if
       /// expresion is not correct. This program also accepts var the start with a letter and end
       /// with a number ie a1 is accetepable a1a is not. 
       /// 
       /// </summary>
    public static class Evaluator
    {
        /// <summary>
        /// Delegate, given a string value returns an int..
        ///</summary>
        /// <param name="v">string</param>
        /// <returns>int</returns>
        public delegate int Lookup(String v);
    
        /// <summary>
        /// 
        /// holds the value of the overall expresion
        /// </summary>
        private static string theExp;

        /// <summary>
        ///  Performs basic math on expression given as a string.  Performs multiplication, division, addition, 
        ///  subtraction and  accepts parethesis.  This method also accepts varaibles given a delagate that recieves
        ///  a string and returns an int.  If the math equation is in illegal form.
        /// </summary>
        /// <param name="exp">String - math expresion ie "1+2 * (2+3)"</param>
        /// <param name="variableEvaluator">Lookup delegate that reiceives a string and returns an int</param>
        /// <returns>the value of the given math expresion as a integer</returns>
        public static int Evaluate(String exp, Lookup variableEvaluator)
        {
            theExp = exp;
            //use the ref keyword??
            Stack<int> valueStack = new Stack<int>();
            Stack<char> operationStack = new Stack<char>();


            // splits a string based to an array if these characters are encounter ( ) - + * /
            exp = Regex.Replace(exp, @"\s+", " ");
            string[] substrings = Regex.Split(exp, "(\\()|(\\))|(-)|(\\+)|(\\*)|(/)");

            //loop through the expression
            foreach (string str1 in substrings)
            {
                //check for an empty string ignore it if is..
                string str = str1.Trim();
                str = Regex.Replace(str, @"\s+", " ");
                if (str.Equals(""))
                    continue;

                //First check to see if the token is a number
                double number;
                if (double.TryParse(str, out number))
           
                    intRecieved(number,valueStack,  operationStack);
                
                else
                {
                    string checkedExp = CheckExpresion(str);
                    //here the token is legal and is either a expression or variable
                    if (checkedExp.Equals("var"))
                    {
                        int num = variableEvaluator(str);
                        intRecieved(num, valueStack, operationStack);
                    }
                    //token mut be +,-,*,/,(,) 
                    else
                        ExpressionRecieved(str[0], valueStack, operationStack);
                }
            }
            // the entire expresion has been processed return value.
            return DetermineAnswer(valueStack, operationStack);

        }
      /// <summary>
      /// This helper method is called at the end after the expression has been parsed
      /// and returns the final answer.  If the expression was not properly formatted 
      /// an exception will be thrown
      /// </summary>
      /// <param name="valueStack">the value stack</param>
      /// <param name="operationStack">the operation stack</param>
      /// <returns>the final andwer as an int</returns>
        private static int DetermineAnswer(Stack<int> valueStack, Stack<char> operationStack)
        {

            //check to see if there is 1 value and if so if operation stack is size is 0
            if (valueStack.Count == 0)
                throw new ArgumentException(theExp + " is not a legal expression, value stack is empty should contain at least 1 value");
            if (valueStack.Count == 1)
            {
                if (operationStack.Count != 0 ) 
                    //if (operationStack.Count ==1 && operationStack.Peek() == '(')
                    //    return valueStack.Pop();
                    //else
                         throw new ArgumentException(theExp + " is not a legal expression, value stack is empty should contain at least 1 value");
                
                else
                    return valueStack.Pop();
            }
            // at this point valueStack must have 2 values and operationStack must have 1.
            else
            {
                //check for possible errors
                if (operationStack.Count != 1)
                

                    throw new ArgumentException(theExp + " is not a legal expression, operation stack should have exactly 1 value has " + operationStack.Count);
                
                if (valueStack.Count != 2)
                
                    throw new ArgumentException(theExp + " is not a legal expression, value stack should have exactly 2 value has " + valueStack.Count);
                

                doMath(operationStack.Peek(), valueStack, operationStack);
                return valueStack.Pop();

            }
        }
         /// <summary>
        /// simple helper method that determines which math expression has been recieved 
        /// and where it should go next
        /// </summary>
        /// <param name="expression">the current token</param>
        /// <param name="valueStack">The value stack</param>
        /// <param name="operationStack">the operation stack</param>

        private static void ExpressionRecieved(char expression,Stack<int> valueStack, Stack<char> operationStack)
        {
            if (expression == '(' || expression == '*' || expression == '/')
            
                operationStack.Push(expression);
            
            else if (expression == '+' || expression == '-')
            
                addSubRecieved(expression, valueStack, operationStack);
            
            else
            
                RightParaenthesisRecieved(valueStack,operationStack);
            

        }


        /// <summary> this method takes in the token and determines if it is a legal character for this program
        /// legal characters include (,),+,-,*,/ and letters and numbers.  This function also test if
        /// a variable is in correct format which is 1 or more letters followed by 1 or more digits (numbers).
        /// This method will throw an error if not correct form.
        /// 
        /// </summary>
        /// <param name="str">The expression to be checked</param>
        /// <returns>"var" if the string is a correctly formatted character or the expresion</returns>
        private static string CheckExpresion(string str)
        {

            if (str.Length == 1)
            {

                char exp = str[0];
                if (exp == '+' || exp == '-' || exp == '*' || exp == '/' || exp == ')' || exp == '(')
                {
                    return exp.ToString();
                }
                else
                {
                    throw new ArgumentException("'" + str + "' is an illegeal Expresion");
                }
            }

            else
            {

                bool numberHit = false;
                //loop through each char and see if first char is a letter and each letter is char until a number
                //is hit at which point check to se if remaing chars are numbers 
                foreach (char c in str)
                {
                    if (!numberHit)
                    {
                        if (isLetter(c))
                            continue;
                        else
                        {
                            if (isNumber(c))
                                numberHit = true;
                            else
                                throw new ArgumentException("'" + str + "' is an illegeal variable");
                        }
                    }
                    if (isNumber(c))
                        continue;
                    else
                        throw new ArgumentException("'" + str + "' is an illegeal variable");
                }
                if (!numberHit)
                    throw new ArgumentException("'" + str + "' is an illegeal variable");
                return "var";
            }
        }
        /// <summary>
        /// Determines wether a character is a Letter A-Z and a-z using ascii values
        /// </summary>
        /// <param name="c">a char</param>
        /// <returns>true if c is a letter false otherwise</returns>
        private static bool isLetter(char c)
        {
            if (c >= 65 && c <= 122)
                return true;
            return false;
        }
        /// <summary>
        /// Determines wether a character is a number (0-9)
        /// </summary>
        /// <param name="c">a char</param>
        /// <returns>true if c is (0-9) false otherwise</returns>

        private static bool isNumber(char c)
        {
            if (c >= 48 && c <= 57)
                return true;
            return false;
        }
        /// <summary>
        /// helper method for  when/if a right paraenthesis is recieved
        /// </summary>
        /// <param name="valueStack">the value stack</param>
        /// <param name="operationStack">the operation stack</param>
        private static void RightParaenthesisRecieved( Stack<int> valueStack ,Stack<char> operationStack)
        {
            if (operationStack.Count == 0)
            
                throw new ArgumentException(theExp + " is an illegal expression");

                char oper = operationStack.Peek();

                if (oper == '+' || oper == '-')
                {

                    doMath(oper, valueStack, operationStack);
                 
                }
                //check to see if a '(' is next if not and there is something on the stack throw an error
                if (operationStack.Count > 0)
                {
                    oper = operationStack.Peek();
                    if (oper == '(')
                    {

                        operationStack.Pop();

                    }
                    else
                    {
                        throw new ArgumentException("");
                    }

                    if (operationStack.Count > 0)
                    {
                        oper = operationStack.Peek();
                        if (oper == '*' || oper == '/')
                        {
                            doMath(oper, valueStack, operationStack);
                        }
                    }

                }
            

        }
        /// <summary>
        /// Called if current token is a + or -.  Will check to see if the next item on operation stack is
        /// a + or minus if it is it will perform that operation. if it is * or / then the operation will be pushed
        /// on the stack
        /// </summary>
        ///  <param name="valueStack">the value stack</param>
        /// <param name="operationStack">the operation stack</param>
        /// <param name="p">the current token either a + or -</param>

        private static void addSubRecieved(char p,  Stack<int> valueStack, Stack<char> operationStack)
        {

            if (operationStack.Count == 0)
            {
                operationStack.Push(p);
                return;
            }
            char oper = operationStack.Peek();
            if (oper == '+' || oper == '-')
                doMath(oper, valueStack, operationStack);
            
            //operation is a *, /, (, or )
            operationStack.Push(p);

        }
        /// <summary>
        /// Called when the current token is a double. If a * or / is on top the operation
        /// stack do the math else just push the number on the Value stack
        /// </summary>
        /// <param name="valueStack">the value stack</param>
        /// <param name="operationStack">the operation stack</param>
        /// <param name="number">the curent token being processed</param>
        private static void intRecieved(double number, Stack<int> valueStack, Stack<char> operationStack)
        {
            int num = (int)number;
            valueStack.Push(num);
            //no current operation push num
            if (operationStack.Count == 0)
                return;

            char operation = operationStack.Peek();
            //if * or / do the peroform the operation
            if (operation == '*' || operation == '/')
            {
                
                doMath(operation, valueStack, operationStack);
            }
        }
     /// <summary>
     /// This helper method takes care of the math operation.  It will pop two values off the value stack and
     /// will perform the operation it is given in the parameter and pop the operation stack.
     /// </summary>
     /// <param name="oper">the operation that needs to be performed +,-,/,*</param>
     /// <param name="valueStack">the value stack</param>
     /// <param name="operationStack">the operation stack</param>
        private static void doMath(char oper, Stack<int> valueStack, Stack<char> operationStack)
        {
            if (valueStack.Count < 2)
            {
                throw new ArgumentException(theExp + " is not a valid expression.");
            }
            int leftOp = valueStack.Pop();
            int rightOp = valueStack.Pop();

            //figure out which operation to perfom
            if (oper == '+')
            {
                valueStack.Push(leftOp + rightOp);
                operationStack.Pop();

            }
            else if (oper == '-')
            {
                valueStack.Push(rightOp - leftOp);
                operationStack.Pop();

            }
            else if (oper == '*')
            {
                valueStack.Push(leftOp * rightOp);
                operationStack.Pop();
                
                return;
            }
            else if (oper == '/')
            {
                if (leftOp == 0)
                    throw new ArgumentException("division by 0");

                valueStack.Push( rightOp / leftOp);
                operationStack.Pop();
              
                return;
            }

        }

    }
}
